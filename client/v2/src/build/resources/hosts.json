{
  "apiVersion": "v2.0",
  "swaggerVersion": "1.2",
  "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
  "resourcePath": "/hosts",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "apis": [
    {
      "internal": false,
      "path": "/hosts/",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of Physical Hosts.",
          "notes": "Get the list of Physical Hosts configured in the cluster.",
          "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;",
          "nickname": "getHosts",
          "parameters": [
            {
              "name": "count",
              "description": "Number of Physical Hosts to retrieve",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "filter_criteria",
              "description": "Filter criteria",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "sort_criteria",
              "description": "Sort criteria",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "search_string",
              "description": "Search string",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "search_attribute_list",
              "description": "Search attribute list",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "page",
              "description": "Page number",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "projection",
              "description": "Projections on the attributes",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/alerts",
      "operations": [
        {
          "deprecated": "true",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of alerts generated on any Host.",
          "notes": "",
          "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
          "nickname": "getHostAlerts",
          "parameters": [
            {
              "name": "start_time_in_usecs",
              "description": "Start time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "end_time_in_usecs",
              "description": "End time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "count",
              "description": "Maximum number of alerts",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "resolved",
              "description": "Alerts which have been resolved",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "boolean"
            },
            {
              "name": "acknowledged",
              "description": "Alerts which have been acknowledged",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "boolean"
            },
            {
              "name": "severity",
              "description": "Alert severities",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "alert_type_uuid",
              "description": "Alert type ids",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "page",
              "description": "Page number",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/events",
      "operations": [
        {
          "deprecated": "true",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of events generated on any Host.",
          "notes": "",
          "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
          "nickname": "getHostEvents",
          "parameters": [
            {
              "name": "start_time_in_usecs",
              "description": "Start time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "end_time_in_usecs",
              "description": "End time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "count",
              "description": "Maximum number of events",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "acknowledged",
              "description": "Events which have been acknowledged",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "boolean"
            },
            {
              "name": "page",
              "description": "Page number",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/gpu_profiles",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of virtual GPU profiles for all physical Hosts.",
          "notes": "Get the list of virtual GPU profiles for all physical Hosts.",
          "type": "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;",
          "nickname": "getVirtualGpuProfiles",
          "parameters": [

          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/host_gpus",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of GPUs for all physical Host.",
          "notes": "Get the list of GPUs for all physical Host.",
          "type": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
          "nickname": "getHostGpus",
          "parameters": [
            {
              "name": "count",
              "description": "Number of host GPUs to retrieve",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "filter_criteria",
              "description": "Filter criteria",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "sort_criteria",
              "description": "Sort criteria",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "search_string",
              "description": "Search string",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get a Physical Host.",
          "notes": "Get a Physical Host with the specified id.",
          "type": "get.dto.appliance.configuration.NodeDTO",
          "nickname": "getHost",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of a Physical Host",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "projection",
              "description": "Projections on the attributes",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/alerts",
      "operations": [
        {
          "deprecated": "true",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of alerts generated on a specified Host.",
          "notes": "",
          "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
          "nickname": "getAlertsForHost",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of a Host",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "start_time_in_usecs",
              "description": "Start time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "end_time_in_usecs",
              "description": "End time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "count",
              "description": "Maximum number of alerts",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "resolved",
              "description": "Alerts which have been resolved",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "boolean"
            },
            {
              "name": "acknowledged",
              "description": "Alerts which have been acknowledged",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "boolean"
            },
            {
              "name": "severity",
              "description": "Alert severities",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "alert_type_uuid",
              "description": "Alert type ids",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "page",
              "description": "Page number",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/enter_maintenance_mode",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "POST",
          "summary": "Put a host in maintenance mode.",
          "notes": "Put a host in maintenance mode. <br/><br/>It can be specified if Virtual Machines currently running on the host need to be powered off, live migrated or cold migrated. The host will be marked as unschedulable, so that no new Virtual Machines can be instantiated on it. Subsequently, an attempt is made to evacuate VMs from the host. <br/><br/>If the evacuation attempt fails (e.g., because there are insufficient resources available elsewhere in the cluster), the host will remain in the entering maintenance mode state, where it is marked unschedulable, waiting for user remediation. <br/><br/>This operation is idempotent and can be run again with different options like powering off the Virtual Machines, live or cold migrating them. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. <br/><br/>The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
          "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
          "nickname": "enterMaintenanceMode",
          "parameters": [
            {
              "name": "uuid",
              "description": "UUID of host to put in maintenance mode",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "description": "Maintenance mode options",
              "required": true,
              "allowMultiple": false,
              "paramType": "body",
              "type": "create.dto.acropolis.MaintenanceModeDTO"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/events",
      "operations": [
        {
          "deprecated": "true",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of events generated on a specified Host.",
          "notes": "",
          "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
          "nickname": "getEventsForHost",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of a Host",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "start_time_in_usecs",
              "description": "Start time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "end_time_in_usecs",
              "description": "End time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "count",
              "description": "Maximum number of events",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "acknowledged",
              "description": "Events which have been acknowledged",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "boolean"
            },
            {
              "name": "page",
              "description": "Page number",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/exit_maintenance_mode",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "POST",
          "summary": "Pull a host out of maintenance mode or abort a prior attempt.",
          "notes": "Pull a host out of maintenance mode or abort a prior attempt to enter maintenance mode even if the attempt is ongoing. <br/><br/>This is a synchronous idempotent operation. If the host is no longer in maintenance mode, this command has no effect.  <br/><br/>If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the host logical timestamp. The logical timestamp can be obtained from the host object.",
          "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
          "nickname": "exitMaintenanceMode",
          "parameters": [
            {
              "name": "uuid",
              "description": "UUID of host to pull out of maintenance mode",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "description": "Logical timestamp associated with host object",
              "required": false,
              "allowMultiple": false,
              "paramType": "body",
              "type": "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/host_gpus",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get the list of GPUs for a physical Host.",
          "notes": "Get the list of GPUs for a physical Host.",
          "type": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
          "nickname": "getGpusforHost",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of the Host",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "count",
              "description": "Number of host GPUs to retrieve",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "filter_criteria",
              "description": "Filter criteria",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "sort_criteria",
              "description": "Sort criteria",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            },
            {
              "name": "search_string",
              "description": "Search string",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "string"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/host_gpus/{gpu_uuid}",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get a particular GPU for a physical Host.",
          "notes": "Get a particular GPU for a physical Host.",
          "type": "get.dto.uhura.HostGPUDTO",
          "nickname": "getGpuforHost",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of the Host",
              "required": false,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "gpu_uuid",
              "description": "UUID of the Host GPU",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/host_gpus/{gpu_uuid}/stats/",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get stats for a particular GPU for a physical Host.",
          "notes": "Get stats for a particular GPU for a physical Host.",
          "type": "get.data.StatsResponse",
          "nickname": "getHostGpuStats",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of the Host",
              "required": false,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "gpu_uuid",
              "description": "UUID of the Host GPU",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "metrics",
              "description": "List of metrics",
              "required": true,
              "allowMultiple": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "start_time_in_usecs",
              "description": "Start time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "end_time_in_usecs",
              "description": "End time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "interval_in_secs",
              "description": "Sampling interval of stats",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    },
    {
      "internal": false,
      "path": "/hosts/{uuid}/stats/",
      "operations": [
        {
          "deprecated": "false",
          "internal": false,
          "method": "GET",
          "summary": "Get the stats for a specified Physical Host.",
          "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
          "type": "get.data.StatsResponse",
          "nickname": "getHostStats",
          "parameters": [
            {
              "name": "uuid",
              "description": "Uuid of a Physical Host",
              "required": true,
              "allowMultiple": false,
              "paramType": "path",
              "type": "string"
            },
            {
              "name": "metrics",
              "description": "List of metrics",
              "required": true,
              "allowMultiple": false,
              "paramType": "query",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "name": "start_time_in_usecs",
              "description": "Start time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "end_time_in_usecs",
              "description": "End time in microseconds",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            },
            {
              "name": "interval_in_secs",
              "description": "Sampling interval of stats",
              "required": false,
              "allowMultiple": false,
              "paramType": "query",
              "type": "integer"
            }
          ],
          "responseMessages": [

          ]
        }
      ]
    }
  ],
  "models": {
    "char": {
      "id": "char",
      "required": [

      ],
      "properties": {

      }
    },
    "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
      "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
      "required": [

      ],
      "properties": {
        "value": {
          "type": "boolean"
        }
      }
    },
    "create.dto.acropolis.MaintenanceModeDTO": {
      "id": "create.dto.acropolis.MaintenanceModeDTO",
      "required": [

      ],
      "properties": {
        "evacuation_option": {
          "description": "Indicates the action we take to evacuate Virtual Machines powered on the host. Virtual Machines can be either powered off, live migrated or cold migrated. ",
          "enum": [
            "POWER_OFF",
            "COLD_MIGRATE",
            "LIVE_MIGRATE"
          ],
          "notes": "VM Evacuation action.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "logical_timestamp": {
          "description": "Logical timestamp that may be provided for consistency. This is an optional field. The current value for the logical timestamp can be obtained from the host object.",
          "format": "int64",
          "notes": "Logical timestamp provided for consistency.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "non_migratable_vm_option": {
          "description": "Indicates the action to take for non migratable VMs.Non migratable VMs like ones with GPUs assigned can choose to be ACPI powered off or fail the maintenance mode.",
          "enum": [
            "BLOCK",
            "ACPI_SHUTDOWN_AND_POWER_OFF"
          ],
          "notes": "Indicates the action to take for non migratable VMs.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO": {
      "id": "create.dto.acropolis.RequestValueDTO$LogicalTimestampDTO",
      "required": [

      ],
      "properties": {
        "logical_timestamp": {
          "description": "Logical timestamp that may be provided for consistency.",
          "format": "int64",
          "notes": "Logical timestamp provided for consistency.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
      "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
      "required": [

      ],
      "properties": {
        "task_uuid": {
          "description": "UUID of the task.",
          "notes": "UUID of the task.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
      "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
      "required": [

      ],
      "properties": {
        "entities": {
          "items": {
            "$ref": "get.dto.ResultContentDescriptor"
          },
          "type": "array"
        },
        "error_info": {
          "$ref": "get.base.ErrorInfo"
        },
        "metadata": {
          "$ref": "get.base.Metadata"
        }
      }
    },
    "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
      "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
      "required": [

      ],
      "properties": {
        "entities": {
          "items": {
            "$ref": "get.dto.alerts.AlertDTO"
          },
          "type": "array"
        },
        "error_info": {
          "$ref": "get.base.ErrorInfo"
        },
        "metadata": {
          "$ref": "get.base.Metadata"
        }
      }
    },
    "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;": {
      "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.NodeDTO&gt;",
      "required": [

      ],
      "properties": {
        "entities": {
          "items": {
            "$ref": "get.dto.appliance.configuration.NodeDTO"
          },
          "type": "array"
        },
        "error_info": {
          "$ref": "get.base.ErrorInfo"
        },
        "metadata": {
          "$ref": "get.base.Metadata"
        }
      }
    },
    "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;": {
      "id": "get.base.EntityCollection&lt;get.dto.uhura.HostGPUDTO&gt;",
      "required": [

      ],
      "properties": {
        "entities": {
          "items": {
            "$ref": "get.dto.uhura.HostGPUDTO"
          },
          "type": "array"
        },
        "error_info": {
          "$ref": "get.base.ErrorInfo"
        },
        "metadata": {
          "$ref": "get.base.Metadata"
        }
      }
    },
    "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;": {
      "id": "get.base.EntityCollection&lt;get.dto.uhura.VirtualGPUProfileDTO&gt;",
      "required": [

      ],
      "properties": {
        "entities": {
          "items": {
            "$ref": "get.dto.uhura.VirtualGPUProfileDTO"
          },
          "type": "array"
        },
        "error_info": {
          "$ref": "get.base.ErrorInfo"
        },
        "metadata": {
          "$ref": "get.base.Metadata"
        }
      }
    },
    "get.base.ErrorInfo": {
      "id": "get.base.ErrorInfo",
      "required": [

      ],
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer"
        },
        "entity_list": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "get.base.Metadata": {
      "id": "get.base.Metadata",
      "required": [

      ],
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "end_index": {
          "format": "int32",
          "type": "integer"
        },
        "filter_criteria": {
          "type": "string"
        },
        "grand_total_entities": {
          "format": "int32",
          "type": "integer"
        },
        "next_cursor": {
          "type": "string"
        },
        "page": {
          "format": "int32",
          "type": "integer"
        },
        "previous_cursor": {
          "type": "string"
        },
        "search_string": {
          "type": "string"
        },
        "sort_criteria": {
          "type": "string"
        },
        "start_index": {
          "format": "int32",
          "type": "integer"
        },
        "total_entities": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "get.common.Address": {
      "id": "get.common.Address",
      "required": [

      ],
      "properties": {
        "hostname": {
          "type": "string"
        },
        "inet_address": {
          "$ref": "java.util.Optional&lt;java.net.InetAddress&gt;"
        },
        "ipv4": {
          "type": "string"
        },
        "ipv6": {
          "type": "string"
        },
        "log": {
          "$ref": "org.slf4j.Logger"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "raw_string": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        },
        "subnet_sep": {
          "type": "string"
        }
      }
    },
    "get.data.StatsResponse": {
      "id": "get.data.StatsResponse",
      "required": [

      ],
      "properties": {
        "stats_specific_responses": {
          "items": {
            "$ref": "get.data.StatsResponse$StatsSpecificResponse"
          },
          "type": "array"
        }
      }
    },
    "get.data.StatsResponse$StatsSpecificResponse": {
      "id": "get.data.StatsResponse$StatsSpecificResponse",
      "required": [

      ],
      "properties": {
        "interval_in_secs": {
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "metric": {
          "type": "string"
        },
        "start_time_in_usecs": {
          "format": "int64",
          "type": "integer"
        },
        "successful": {
          "type": "boolean"
        },
        "values": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      }
    },
    "get.dto.EntityMetadata": {
      "id": "get.dto.EntityMetadata",
      "required": [

      ],
      "properties": {
        "additional_fields": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
        },
        "cluster_uuid": {
          "type": "string"
        },
        "context_hint_field": {
          "type": "string"
        },
        "context_hint_value": {
          "type": "string"
        },
        "entity_id": {
          "type": "string"
        },
        "entity_name": {
          "type": "string"
        },
        "entity_type": {
          "enum": [
            "PAGE",
            "CLUSTER",
            "HARDWARE",
            "STORAGE",
            "BACKUP",
            "DR",
            "LICENSE",
            "DISK",
            "STORAGE_TIER",
            "HOST",
            "NODE",
            "MANAGEMENT_SERVER",
            "MANAGEMENT_SERVER_INFO",
            "VM",
            "SERVICE_VM",
            "MH_VM",
            "NUCALM_CONSUMPTION",
            "VDISK",
            "VIRTUAL_DISK",
            "STORAGE_POOL",
            "CONTAINER",
            "STORAGE_CONTAINER",
            "VZONE",
            "SNAPSHOT",
            "FAST_CLONE",
            "RSYSLOG_SERVER",
            "KEY_MANAGEMENT_SERVER",
            "CERTIFICATE",
            "HTTP_PROXY",
            "SNMP_TRAP",
            "SNMP_USER",
            "REMOTE_SITE",
            "CLOUD_CREDENTIALS",
            "PROTECTION_DOMAIN",
            "CONSISTENCY_GROUP",
            "REPLICATION",
            "REPLICATION_LINK",
            "SYNC_REPLICATION",
            "VSTORE",
            "NETWORK_SWITCH_INTERFACE",
            "NETWORK_SWITCH",
            "VIRTUAL_NIC",
            "VMKERNEL_NIC",
            "HOST_NIC",
            "NIC_TEAM",
            "VIRTUAL_NETWORK",
            "VIRTUAL_SWITCH",
            "HOST_GPU",
            "VIRTUAL_GPU",
            "TAG",
            "COMMENT",
            "TASK",
            "IMAGE",
            "IMAGE_INFO",
            "ISCSI_CLIENT",
            "VOLUME_GROUP",
            "VOLUME_DISK",
            "VM_DISK",
            "FILE_SERVER",
            "FS_PARTNER_SERVER",
            "CVM",
            "NVM",
            "FILE_SERVER_SHARE",
            "ALERT_CAUSE",
            "ALERT_CHECK_SCHEMA",
            "ALERT_CHECK_SCHEMA_OVERRIDE",
            "AUDIT_EVENT_SCHEMA",
            "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
            "RACKABLE_UNIT",
            "DIRECTORY_CONFIG",
            "HEALTH_CHECK",
            "NETWORK_SNMP_PROFILE",
            "ALERT",
            "EVENT",
            "AUDIT",
            "SCHEDULE",
            "BANDWIDTH_POLICY",
            "FILE_GROUP",
            "NETWORK_MAPPING",
            "PROGRESS_MONITOR",
            "LCM_ENTITY",
            "LCM_AVAILABLE_VERSION",
            "CAPACITY_SCENARIO",
            "NCC_ERROR_CODES",
            "RESOURCE_CONSUMPTION",
            "REPORT_CONFIG",
            "REPORT_INSTANCE",
            "COMMON_REPORT_CONFIG",
            "REMOTE_CONNECTION",
            "CLOUD_TRUST",
            "DUMMY_API",
            "QOS_POLICY",
            "IDENTITY_PROVIDER",
            "NGT_POLICY",
            "PROTECTION_RULE",
            "ROLE",
            "CATEGORY",
            "ABAC_CATEGORY",
            "ABAC_CATEGORY_KEY",
            "ABAC_ENTITY_CAPABILITY",
            "NUCALM_APP_BLUEPRINT",
            "NUCALM_APPLICATION",
            "PROJECT",
            "AFFINITY_RULE",
            "MARKETPLACE_ITEM",
            "RECOVERY_PLAN",
            "RECOVERY_PLAN_JOB",
            "ABAC_USER_CAPABILITY",
            "AVAILABILITY_ZONE",
            "VM_RECOVERY_POINT",
            "NETWORK_SECURITY_RULE",
            "REMOTE_SYSLOG_SERVER",
            "REMOTE_SYSLOG_MODULE",
            "CITRIX_ADAPTER",
            "FAVORITE",
            "ANALYSIS_SESSION",
            "WIDGET",
            "SQL_SERVER",
            "QUERY",
            "DATABASE",
            "AVAILABILITY_GROUP",
            "FAILOVER_NODE",
            "EXTERNAL_ENTITY_CONFIG",
            "SUBNET",
            "ACTION_RULE",
            "POLICY_SCHEMA",
            "PRISM_NOTIFICATION_SERVICE_STATS",
            "VOLUME_GROUP_CONFIG"
          ],
          "type": "string"
        }
      }
    },
    "get.dto.ResultContentDescriptor": {
      "id": "get.dto.ResultContentDescriptor",
      "required": [

      ],
      "properties": {
        "actions": {
          "type": "string"
        },
        "alerts": {
          "type": "string"
        },
        "cadmus": {
          "type": "string"
        },
        "entities": {
          "type": "string"
        },
        "help": {
          "type": "string"
        },
        "metadata": {
          "$ref": "get.dto.ResultMetadata"
        },
        "perspectives": {
          "items": {
            "$ref": "get.dto.ResultContentDescriptor$Perspective"
          },
          "type": "array"
        }
      }
    },
    "get.dto.ResultContentDescriptor$Perspective": {
      "id": "get.dto.ResultContentDescriptor$Perspective",
      "required": [

      ],
      "properties": {
        "format": {
          "enum": [
            "TABLE",
            "BAR_CHART",
            "PIE_CHART",
            "TIME_SERIES",
            "KEY_VALUE",
            "COUNT",
            "HEALTH_SUMMARY",
            "ALERT_INFO",
            "CAPACITY",
            "OTHER"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "get.dto.ResultMetadata"
        },
        "query": {

        },
        "result": {

        },
        "type": {
          "type": "string"
        }
      }
    },
    "get.dto.ResultMetadata": {
      "id": "get.dto.ResultMetadata",
      "required": [

      ],
      "properties": {
        "entity_type": {
          "enum": [
            "PAGE",
            "CLUSTER",
            "HARDWARE",
            "STORAGE",
            "BACKUP",
            "DR",
            "LICENSE",
            "DISK",
            "STORAGE_TIER",
            "HOST",
            "NODE",
            "MANAGEMENT_SERVER",
            "MANAGEMENT_SERVER_INFO",
            "VM",
            "SERVICE_VM",
            "MH_VM",
            "NUCALM_CONSUMPTION",
            "VDISK",
            "VIRTUAL_DISK",
            "STORAGE_POOL",
            "CONTAINER",
            "STORAGE_CONTAINER",
            "VZONE",
            "SNAPSHOT",
            "FAST_CLONE",
            "RSYSLOG_SERVER",
            "KEY_MANAGEMENT_SERVER",
            "CERTIFICATE",
            "HTTP_PROXY",
            "SNMP_TRAP",
            "SNMP_USER",
            "REMOTE_SITE",
            "CLOUD_CREDENTIALS",
            "PROTECTION_DOMAIN",
            "CONSISTENCY_GROUP",
            "REPLICATION",
            "REPLICATION_LINK",
            "SYNC_REPLICATION",
            "VSTORE",
            "NETWORK_SWITCH_INTERFACE",
            "NETWORK_SWITCH",
            "VIRTUAL_NIC",
            "VMKERNEL_NIC",
            "HOST_NIC",
            "NIC_TEAM",
            "VIRTUAL_NETWORK",
            "VIRTUAL_SWITCH",
            "HOST_GPU",
            "VIRTUAL_GPU",
            "TAG",
            "COMMENT",
            "TASK",
            "IMAGE",
            "IMAGE_INFO",
            "ISCSI_CLIENT",
            "VOLUME_GROUP",
            "VOLUME_DISK",
            "VM_DISK",
            "FILE_SERVER",
            "FS_PARTNER_SERVER",
            "CVM",
            "NVM",
            "FILE_SERVER_SHARE",
            "ALERT_CAUSE",
            "ALERT_CHECK_SCHEMA",
            "ALERT_CHECK_SCHEMA_OVERRIDE",
            "AUDIT_EVENT_SCHEMA",
            "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
            "RACKABLE_UNIT",
            "DIRECTORY_CONFIG",
            "HEALTH_CHECK",
            "NETWORK_SNMP_PROFILE",
            "ALERT",
            "EVENT",
            "AUDIT",
            "SCHEDULE",
            "BANDWIDTH_POLICY",
            "FILE_GROUP",
            "NETWORK_MAPPING",
            "PROGRESS_MONITOR",
            "LCM_ENTITY",
            "LCM_AVAILABLE_VERSION",
            "CAPACITY_SCENARIO",
            "NCC_ERROR_CODES",
            "RESOURCE_CONSUMPTION",
            "REPORT_CONFIG",
            "REPORT_INSTANCE",
            "COMMON_REPORT_CONFIG",
            "REMOTE_CONNECTION",
            "CLOUD_TRUST",
            "DUMMY_API",
            "QOS_POLICY",
            "IDENTITY_PROVIDER",
            "NGT_POLICY",
            "PROTECTION_RULE",
            "ROLE",
            "CATEGORY",
            "ABAC_CATEGORY",
            "ABAC_CATEGORY_KEY",
            "ABAC_ENTITY_CAPABILITY",
            "NUCALM_APP_BLUEPRINT",
            "NUCALM_APPLICATION",
            "PROJECT",
            "AFFINITY_RULE",
            "MARKETPLACE_ITEM",
            "RECOVERY_PLAN",
            "RECOVERY_PLAN_JOB",
            "ABAC_USER_CAPABILITY",
            "AVAILABILITY_ZONE",
            "VM_RECOVERY_POINT",
            "NETWORK_SECURITY_RULE",
            "REMOTE_SYSLOG_SERVER",
            "REMOTE_SYSLOG_MODULE",
            "CITRIX_ADAPTER",
            "FAVORITE",
            "ANALYSIS_SESSION",
            "WIDGET",
            "SQL_SERVER",
            "QUERY",
            "DATABASE",
            "AVAILABILITY_GROUP",
            "FAILOVER_NODE",
            "EXTERNAL_ENTITY_CONFIG",
            "SUBNET",
            "ACTION_RULE",
            "POLICY_SCHEMA",
            "PRISM_NOTIFICATION_SERVICE_STATS",
            "VOLUME_GROUP_CONFIG"
          ],
          "type": "string"
        },
        "filters": {
          "items": {
            "$ref": "get.dto.ResultMetadata$Filter"
          },
          "type": "array"
        },
        "instances": {
          "items": {
            "$ref": "get.dto.EntityMetadata"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "get.dto.ResultMetadata$Filter": {
      "id": "get.dto.ResultMetadata$Filter",
      "required": [

      ],
      "properties": {
        "display_for_rhs": {
          "type": "string"
        },
        "lhs": {
          "type": "string"
        },
        "operator": {
          "description": "Operator for the filter.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "rhs": {
          "type": "string"
        }
      }
    },
    "get.dto.alerts.AlertCauseDTO": {
      "id": "get.dto.alerts.AlertCauseDTO",
      "required": [

      ],
      "properties": {
        "actions": {
          "description": "Possible actions to resolve this alert",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "additional_links": {
          "description": "Additional links",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "alert_namespace": {
          "description": "Namespace this alert belongs to",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "cause": {
          "description": "Detailed description",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "chart_queries": {
          "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
          "description": "Charts that are relevant to this cause",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "details": {
          "description": "Symptoms for this cause",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "has_global_details": {
          "description": "Whether the alert has global details or not",
          "type": "boolean",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "id": {
          "description": "Cause Id",
          "type": "string",
          "typeCategory": "CLASS",
          "typeDetails": "java.util.UUID",
          "typeName": "UUID_TYPE"
        },
        "num_resolved_count": {
          "description": "Number of times this cause has resolved the alert",
          "format": "int64",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "parent_cause_id": {
          "description": "Id of the alert/cause this is a possible cause for",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "title": {
          "description": "Short description",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "troubleshooting_steps": {
          "description": "Steps to determine whether this is the cause.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.alerts.AlertDTO": {
      "id": "get.dto.alerts.AlertDTO",
      "required": [

      ],
      "properties": {
        "acknowledged": {
          "type": "boolean"
        },
        "acknowledged_by_username": {
          "type": "string"
        },
        "acknowledged_time_stamp_in_usecs": {
          "format": "int64",
          "type": "integer"
        },
        "affected_entities": {
          "items": {
            "$ref": "get.dto.alerts.AlertDTO$AffectedEntity"
          },
          "type": "array"
        },
        "alert_details": {
          "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
        },
        "alert_title": {
          "type": "string"
        },
        "alert_type_uuid": {
          "type": "string"
        },
        "auto_resolved": {
          "type": "boolean"
        },
        "check_id": {
          "type": "string"
        },
        "classifications": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "cluster_uuid": {
          "type": "string"
        },
        "context_types": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "context_values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "created_time_stamp_in_usecs": {
          "format": "int64",
          "type": "integer"
        },
        "detailed_message": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "impact_types": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "last_occurrence_time_stamp_in_usecs": {
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "node_uuid": {
          "type": "string"
        },
        "operation_type": {
          "type": "string"
        },
        "originating_cluster_uuid": {
          "type": "string"
        },
        "possible_causes": {
          "items": {
            "$ref": "get.dto.alerts.AlertCauseDTO"
          },
          "type": "array"
        },
        "resolved": {
          "type": "boolean"
        },
        "resolved_by_username": {
          "type": "string"
        },
        "resolved_time_stamp_in_usecs": {
          "format": "int64",
          "type": "integer"
        },
        "service_vmid": {
          "type": "string"
        },
        "severity": {
          "description": "This field describes the severity of the alert.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "user_defined": {
          "type": "boolean"
        }
      }
    },
    "get.dto.alerts.AlertDTO$AffectedEntity": {
      "id": "get.dto.alerts.AlertDTO$AffectedEntity",
      "required": [

      ],
      "properties": {
        "entity_name": {
          "type": "string"
        },
        "entity_type": {
          "type": "string"
        },
        "entity_type_display_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
      "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
      "required": [

      ],
      "properties": {
        "metric_details": {
          "description": "List of metric details associated with the alert",
          "items": {
            "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
          },
          "notes": "List of metric details associated with the alert",
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "severity_trails": {
          "description": "List that contains severity level change details",
          "items": {
            "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
          },
          "notes": "List that contains severity level change details",
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.alerts.AlertDTO$MetricDetails": {
      "id": "get.dto.alerts.AlertDTO$MetricDetails",
      "required": [

      ],
      "properties": {
        "comparison_operator": {
          "description": "Comparison Operator to be applied for teh values.",
          "notes": "Comparison Operator",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "condition_type": {
          "description": "Condition Type that the current metric is associated with.",
          "enum": [
            "STATIC_THRESHOLD",
            "ANOMALY",
            "SAFETY_ZONE"
          ],
          "notes": "Condition Type that the current metric is associated with.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "data_type": {
          "description": "Data Type of the value.",
          "enum": [
            "LONG",
            "DOUBLE",
            "BOOLEAN",
            "STRING"
          ],
          "notes": "Data Type of the value.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "entity_id": {
          "description": "UUID of the entity",
          "notes": "UUID of the entity",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "entity_type": {
          "description": "Entity Type",
          "notes": "Entity Type",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "metric_category": {
          "description": "Category of metric",
          "notes": "Category of metric",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "metric_display_name": {
          "description": "Display name of the metric",
          "notes": "Display name of the metric",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "metric_name": {
          "description": "Name of the metric",
          "notes": "Name of the metric",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "metric_value_details": {
          "description": "List of metric values at different instances of time in the alert lifecycle",
          "items": {
            "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
          },
          "notes": "List of metric values at different instances of time in the alert lifecycle",
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "unit": {
          "description": "Unit of the metric value.",
          "notes": "Unit of the metric value.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.alerts.AlertDTO$MetricValueDetails": {
      "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
      "required": [

      ],
      "properties": {
        "metric_threshold_value": {
          "description": "Threshold value of the metric that was specified in the policy at that given time.",
          "notes": "Threshold value of the metric that was specified in the policy at that given time.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "metric_value": {
          "description": "Actual value of the metric at that given time.",
          "notes": "Actual value of the metric at that given time.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "state_change_time_stamp_in_usecs": {
          "description": "Time at which the alert's state change occurred.",
          "format": "int64",
          "notes": "Time at which the alert's state change occurred.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.alerts.AlertDTO$SeverityTrail": {
      "id": "get.dto.alerts.AlertDTO$SeverityTrail",
      "required": [

      ],
      "properties": {
        "severity": {
          "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
          "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "severity_change_timestamp_in_usecs": {
          "description": "Time at which the severity level change occurred",
          "format": "int64",
          "notes": "Time at which the severity level change occurred",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.alerts.AlertSummaryDTO": {
      "id": "get.dto.alerts.AlertSummaryDTO",
      "required": [

      ],
      "properties": {
        "alert_summaries": {
          "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
        },
        "count": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "get.dto.appliance.configuration.NodeDTO": {
      "id": "get.dto.appliance.configuration.NodeDTO",
      "required": [

      ],
      "properties": {
        "acropolis_connection_state": {
          "type": "string"
        },
        "alert_summary": {
          "$ref": "get.dto.alerts.AlertSummaryDTO"
        },
        "backplane_address": {
          "items": {
            "$ref": "get.common.Address"
          },
          "type": "array"
        },
        "backplane_ip": {
          "type": "string"
        },
        "bios_model": {
          "description": "Specifies the model of bios, present on the node",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "bios_version": {
          "description": "Specifies the version of bios, present on the node",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "block_location": {
          "type": "string"
        },
        "block_model": {
          "type": "string"
        },
        "block_model_name": {
          "type": "string"
        },
        "block_serial": {
          "type": "string"
        },
        "bmc_model": {
          "description": "Specifies the model of bmc, present on the node",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "bmc_version": {
          "description": "Specifies the version of bmc, present on the node",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "boot_time_in_usecs": {
          "format": "int64",
          "type": "integer"
        },
        "cluster_uuid": {
          "type": "string"
        },
        "controller_vm_backplane_address": {
          "items": {
            "$ref": "get.common.Address"
          },
          "type": "array"
        },
        "controller_vm_backplane_ip": {
          "type": "string"
        },
        "cpu_capacity_in_hz": {
          "format": "int64",
          "type": "integer"
        },
        "cpu_frequency_in_hz": {
          "format": "int64",
          "type": "integer"
        },
        "cpu_model": {
          "type": "string"
        },
        "default_vhd_location": {
          "description": "The default location configured on the Hyper-V node for storing virtual hard disk files.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "default_vhd_storage_container_id": {
          "description": "Specifies the ID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "default_vhd_storage_container_uuid": {
          "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual hard disk files on the Hyper-V node happens to be a Nutanix container.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "default_vm_location": {
          "description": "The default location configured on the Hyper-V node for storing virtual machine configuration files.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "default_vm_storage_container_id": {
          "description": "Specifies the Id of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "default_vm_storage_container_uuid": {
          "description": "Specifies the UUID of the Nutanix container if the default location for storing virtual machine configuration files on the Hyper-V node happens to be a Nutanix storage container.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "disk_hardware_configs": {
          "$ref": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
          "description": "The disk hardware configurations. This field is not applicable if fetched from PC.",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "dynamic_ring_changing_node": {
          "$ref": "get.dto.appliance.configuration.NodeDTO"
        },
        "failover_cluster_fqdn": {
          "description": "The name of the Hyper-V failover cluster that this node is a part of. Applies only if the node runs Hyper-V",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "failover_cluster_node_state": {
          "description": "If this node runs Hyper-V and is part of a failovercluster, this property specifies the state of the nodein the failover cluster.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_driver_version": {
          "description": "Host driver version of the GPUs.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "has_csr": {
          "type": "boolean"
        },
        "hba_firmwares_list": {
          "description": "Specifies the version and model info of the hba, present on the node",
          "items": {
            "$ref": "get.dto.appliance.configuration.NodeDTO$HbaFirmware"
          },
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "health_summary": {
          "$ref": "get.dto.health.check.HealthSummaryDTO"
        },
        "host_gpus": {
          "description": "The host GPUs.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "host_in_maintenance_mode": {
          "type": "boolean"
        },
        "host_maintenance_mode_reason": {
          "type": "string"
        },
        "host_nic_ids": {
          "description": "The host nic ids",
          "items": {
            "type": "string"
          },
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "host_type": {
          "description": "The type of the host.",
          "enum": [
            "HYPER_CONVERGED",
            "COMPUTE_ONLY"
          ],
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "hypervisor_address": {
          "type": "string"
        },
        "hypervisor_address_value": {
          "items": {
            "$ref": "get.common.Address"
          },
          "type": "array"
        },
        "hypervisor_full_name": {
          "type": "string"
        },
        "hypervisor_key": {
          "type": "string"
        },
        "hypervisor_password": {
          "type": "string"
        },
        "hypervisor_state": {
          "type": "string"
        },
        "hypervisor_type": {
          "type": "string"
        },
        "hypervisor_username": {
          "type": "string"
        },
        "ipmi_address": {
          "type": "string"
        },
        "ipmi_address_value": {
          "items": {
            "$ref": "get.common.Address"
          },
          "type": "array"
        },
        "ipmi_password": {
          "type": "string"
        },
        "ipmi_username": {
          "type": "string"
        },
        "is_degraded": {
          "type": "boolean"
        },
        "is_hardware_virtualized": {
          "type": "boolean"
        },
        "is_secure_booted": {
          "type": "boolean"
        },
        "key_management_device_to_certificate_status": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
        },
        "management_server_name": {
          "type": "string"
        },
        "memory_capacity_in_bytes": {
          "format": "int64",
          "type": "integer"
        },
        "metadata_store_status": {
          "type": "string"
        },
        "metadata_store_status_message": {
          "type": "string"
        },
        "monitored": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "num_cpu_cores": {
          "format": "int64",
          "type": "integer"
        },
        "num_cpu_sockets": {
          "format": "int64",
          "type": "integer"
        },
        "num_cpu_threads": {
          "format": "int64",
          "type": "integer"
        },
        "num_vms": {
          "format": "int64",
          "type": "integer"
        },
        "oplog_disk_pct": {
          "format": "float",
          "type": "number"
        },
        "oplog_disk_size": {
          "format": "int64",
          "type": "integer"
        },
        "position": {
          "$ref": "get.dto.appliance.configuration.NodePositionDTO"
        },
        "rdma_backplane_address_list": {
          "items": {
            "$ref": "get.common.Address"
          },
          "type": "array"
        },
        "rdma_backplane_ips": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "reboot_pending": {
          "description": "If this node runs Hyper-V, this property indicates that a reboot is pending for the earlier initiated domain joining to be complete.",
          "type": "boolean",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "removal_status": {
          "items": {
            "enum": [
              "NA",
              "AWAITING_CONFIG_DATA_MIGRATION",
              "AWAITING_DATA_MIGRATION",
              "AWAITING_HOST_EVACUATION",
              "AWAITING_CLUSTER_RESTART",
              "AWAITING_MASTER_KEY_MIGRATION"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "serial": {
          "type": "string"
        },
        "service_vmexternal_address": {
          "items": {
            "$ref": "get.common.Address"
          },
          "type": "array"
        },
        "service_vmexternal_ip": {
          "type": "string"
        },
        "service_vmid": {
          "type": "string"
        },
        "service_vmnat_ip": {
          "type": "string"
        },
        "service_vmnat_port": {
          "format": "int32",
          "type": "integer"
        },
        "state": {
          "enum": [
            "NEW",
            "NORMAL",
            "MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE",
            "DETACHABLE"
          ],
          "type": "string"
        },
        "stats": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
        },
        "usage_stats": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
        },
        "uuid": {
          "type": "string"
        },
        "vzone_name": {
          "type": "string"
        }
      }
    },
    "get.dto.appliance.configuration.NodeDTO$HbaFirmware": {
      "id": "get.dto.appliance.configuration.NodeDTO$HbaFirmware",
      "required": [

      ],
      "properties": {
        "hba_model": {
          "description": "Specifies the model of hba, present on the node",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "hba_version": {
          "description": "Specifies the version of hba, present on the node",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.appliance.configuration.NodePositionDTO": {
      "id": "get.dto.appliance.configuration.NodePositionDTO",
      "required": [

      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "ordinal": {
          "format": "int32",
          "type": "integer"
        },
        "physical_position": {
          "enum": [
            "C",
            "L",
            "R",
            "TL",
            "TR",
            "BL",
            "BR"
          ],
          "type": "string"
        }
      }
    },
    "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
      "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
      "required": [

      ],
      "properties": {
        "checks_in_error": {
          "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
        },
        "detailed_check_summary": {
          "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
        },
        "entity_type": {
          "enum": [
            "PAGE",
            "CLUSTER",
            "HARDWARE",
            "STORAGE",
            "BACKUP",
            "DR",
            "LICENSE",
            "DISK",
            "STORAGE_TIER",
            "HOST",
            "NODE",
            "MANAGEMENT_SERVER",
            "MANAGEMENT_SERVER_INFO",
            "VM",
            "SERVICE_VM",
            "MH_VM",
            "NUCALM_CONSUMPTION",
            "VDISK",
            "VIRTUAL_DISK",
            "STORAGE_POOL",
            "CONTAINER",
            "STORAGE_CONTAINER",
            "VZONE",
            "SNAPSHOT",
            "FAST_CLONE",
            "RSYSLOG_SERVER",
            "KEY_MANAGEMENT_SERVER",
            "CERTIFICATE",
            "HTTP_PROXY",
            "SNMP_TRAP",
            "SNMP_USER",
            "REMOTE_SITE",
            "CLOUD_CREDENTIALS",
            "PROTECTION_DOMAIN",
            "CONSISTENCY_GROUP",
            "REPLICATION",
            "REPLICATION_LINK",
            "SYNC_REPLICATION",
            "VSTORE",
            "NETWORK_SWITCH_INTERFACE",
            "NETWORK_SWITCH",
            "VIRTUAL_NIC",
            "VMKERNEL_NIC",
            "HOST_NIC",
            "NIC_TEAM",
            "VIRTUAL_NETWORK",
            "VIRTUAL_SWITCH",
            "HOST_GPU",
            "VIRTUAL_GPU",
            "TAG",
            "COMMENT",
            "TASK",
            "IMAGE",
            "IMAGE_INFO",
            "ISCSI_CLIENT",
            "VOLUME_GROUP",
            "VOLUME_DISK",
            "VM_DISK",
            "FILE_SERVER",
            "FS_PARTNER_SERVER",
            "CVM",
            "NVM",
            "FILE_SERVER_SHARE",
            "ALERT_CAUSE",
            "ALERT_CHECK_SCHEMA",
            "ALERT_CHECK_SCHEMA_OVERRIDE",
            "AUDIT_EVENT_SCHEMA",
            "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
            "RACKABLE_UNIT",
            "DIRECTORY_CONFIG",
            "HEALTH_CHECK",
            "NETWORK_SNMP_PROFILE",
            "ALERT",
            "EVENT",
            "AUDIT",
            "SCHEDULE",
            "BANDWIDTH_POLICY",
            "FILE_GROUP",
            "NETWORK_MAPPING",
            "PROGRESS_MONITOR",
            "LCM_ENTITY",
            "LCM_AVAILABLE_VERSION",
            "CAPACITY_SCENARIO",
            "NCC_ERROR_CODES",
            "RESOURCE_CONSUMPTION",
            "REPORT_CONFIG",
            "REPORT_INSTANCE",
            "COMMON_REPORT_CONFIG",
            "REMOTE_CONNECTION",
            "CLOUD_TRUST",
            "DUMMY_API",
            "QOS_POLICY",
            "IDENTITY_PROVIDER",
            "NGT_POLICY",
            "PROTECTION_RULE",
            "ROLE",
            "CATEGORY",
            "ABAC_CATEGORY",
            "ABAC_CATEGORY_KEY",
            "ABAC_ENTITY_CAPABILITY",
            "NUCALM_APP_BLUEPRINT",
            "NUCALM_APPLICATION",
            "PROJECT",
            "AFFINITY_RULE",
            "MARKETPLACE_ITEM",
            "RECOVERY_PLAN",
            "RECOVERY_PLAN_JOB",
            "ABAC_USER_CAPABILITY",
            "AVAILABILITY_ZONE",
            "VM_RECOVERY_POINT",
            "NETWORK_SECURITY_RULE",
            "REMOTE_SYSLOG_SERVER",
            "REMOTE_SYSLOG_MODULE",
            "CITRIX_ADAPTER",
            "FAVORITE",
            "ANALYSIS_SESSION",
            "WIDGET",
            "SQL_SERVER",
            "QUERY",
            "DATABASE",
            "AVAILABILITY_GROUP",
            "FAILOVER_NODE",
            "EXTERNAL_ENTITY_CONFIG",
            "SUBNET",
            "ACTION_RULE",
            "POLICY_SCHEMA",
            "PRISM_NOTIFICATION_SERVICE_STATS",
            "VOLUME_GROUP_CONFIG"
          ],
          "type": "string"
        },
        "filter_criteria": {
          "type": "string"
        },
        "health_summary": {
          "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
        }
      }
    },
    "get.dto.health.check.HealthSummaryDTO": {
      "id": "get.dto.health.check.HealthSummaryDTO",
      "required": [

      ],
      "properties": {
        "entity_type_summaries": {
          "items": {
            "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
          },
          "type": "array"
        },
        "health_check_summaries": {
          "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
        },
        "health_status": {
          "enum": [
            "Critical",
            "Warning",
            "Good",
            "Unknown",
            "Error"
          ],
          "type": "string"
        }
      }
    },
    "get.dto.uhura.GPUConfigDTO": {
      "id": "get.dto.uhura.GPUConfigDTO",
      "required": [

      ],
      "properties": {
        "assignable": {
          "description": "Whether the GPU can be assigned to a Virtual Machine.",
          "notes": "Whether the GPU can be assigned to a Virtual Machine.",
          "type": "boolean",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "device_id": {
          "description": "Device ID of the GPU resource.",
          "format": "int32",
          "notes": "Device ID of the GPU resource.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "device_name": {
          "description": "Vendor device name of the GPU resource.",
          "notes": "Vendor device name of the GPU resource.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "fraction": {
          "description": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
          "format": "int32",
          "notes": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "frame_buffer_size_bytes": {
          "description": "GPU framebuffer size in bytes.",
          "format": "int64",
          "notes": "GPU framebuffer size.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_mode": {
          "description": "Current mode of the physical GPU. Not valid on vGPU resources.",
          "enum": [
            "UNUSED",
            "USED_FOR_PASSTHROUGH",
            "USED_FOR_VIRTUAL"
          ],
          "notes": "Current mode of the physical GPU.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_profile": {
          "description": "Profile of the GPU.",
          "notes": "Profile of the GPU.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_type": {
          "description": "Type of the GPU resource.",
          "enum": [
            "PASS_THROUGH_GRAPHICS",
            "PASS_THROUGH_COMPUTE",
            "VIRTUAL"
          ],
          "notes": "Type of the GPU resource.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_vendor": {
          "description": "Vendor of the GPU resource.",
          "enum": [
            "NVIDIA",
            "INTEL",
            "AMD"
          ],
          "notes": "Vendor of the GPU resource.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "guest_driver_version": {
          "description": "Last determined guest driver version.",
          "notes": "Last determined guest driver version.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "in_use": {
          "description": "Whether the GPU resource is in use or not.",
          "notes": "Whether the GPU resource is in use or not.",
          "type": "boolean",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "licenses": {
          "description": "List of license types associated with this GPU.",
          "items": {
            "type": "string"
          },
          "notes": "List of license types.",
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "max_instances_per_vm": {
          "description": "Max Instances Per Vm stats where the GPU resource is present.",
          "format": "int32",
          "notes": "Max Instances Per Vm stats where the GPU resource is present.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "max_resolution": {
          "description": "Maximum resolution per display heads.",
          "notes": "Maximum resolution per display heads.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "num_virtual_display_heads": {
          "description": "Number of supported virtual display heads.",
          "format": "int32",
          "notes": "Number of supported virtual display heads.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "numa_node": {
          "description": "The NUMA node where the GPU belongs to.",
          "format": "int32",
          "notes": "The NUMA node where the GPU belongs to.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "sbdf": {
          "description": "Unique device information for the GPU resource.",
          "notes": "Unique device information for the GPU resource.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "vm_uuids": {
          "description": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
          "items": {
            "type": "string"
          },
          "notes": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.uhura.HostGPUDTO": {
      "id": "get.dto.uhura.HostGPUDTO",
      "required": [

      ],
      "properties": {
        "cluster_name": {
          "description": "Name of the cluster where the GPU resource is present.",
          "notes": "Name of the cluster where the GPU resource is present.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "cluster_uuid": {
          "description": "UUID of the cluster where the GPU resource is present.",
          "notes": "UUID of the cluster where the GPU resource is present.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_config": {
          "$ref": "get.dto.uhura.GPUConfigDTO",
          "description": "Configuration of the GPU resource.",
          "notes": "Configuration of the GPU resource.",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "id": {
          "description": "ID of the GPU resource.",
          "notes": "ID of the GPU resource.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "node_id": {
          "description": "Id of the node where the GPU resource is present.",
          "notes": "Id of the node where the GPU resource is present.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "node_uuid": {
          "description": "UUID of the node where the GPU resource is present.",
          "notes": "UUID of the node where the GPU resource is present.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "num_vgpus_allocated": {
          "description": "Number of vGPUs allocated.",
          "format": "int32",
          "notes": "Number of vGPUs allocated.",
          "type": "integer",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "uuid": {
          "description": "UUID of the GPU resource.",
          "notes": "UUID of the GPU resource.",
          "type": "string",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "get.dto.uhura.VirtualGPUProfileDTO": {
      "id": "get.dto.uhura.VirtualGPUProfileDTO",
      "required": [

      ],
      "properties": {
        "allocated_vm_uuids": {
          "description": "List of UUIDs of virtual machines that have been allocated a GPU belonging to this profile.",
          "items": {
            "type": "string"
          },
          "notes": "List of UUIDs of virtual machines that have been allocated a GPU belonging to this profile.",
          "type": "array",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        },
        "gpu_config": {
          "$ref": "get.dto.uhura.GPUConfigDTO",
          "description": "Configuration of the GPU resource.",
          "notes": "Configuration of the GPU resource.",
          "typeCategory": "PATTERN",
          "typeDetails": ".*",
          "typeName": "DEFAULT"
        }
      }
    },
    "java.io.ObjectStreamField": {
      "id": "java.io.ObjectStreamField",
      "required": [

      ],
      "properties": {
        "field": {
          "$ref": "java.lang.reflect.Field"
        },
        "name": {
          "type": "string"
        },
        "offset": {
          "format": "int32",
          "type": "integer"
        },
        "signature": {
          "type": "string"
        },
        "type": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "unshared": {
          "type": "boolean"
        }
      }
    },
    "java.lang.Class$AnnotationData": {
      "id": "java.lang.Class$AnnotationData",
      "required": [

      ],
      "properties": {
        "annotations": {
          "$ref": "java.util.Map&lt;java.lang.Class&lt;unknown&gt;, java.lang.annotation.Annotation&gt;"
        },
        "declared_annotations": {
          "$ref": "java.util.Map&lt;java.lang.Class&lt;unknown&gt;, java.lang.annotation.Annotation&gt;"
        },
        "redefined_count": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "java.lang.Class&lt;unknown&gt;": {
      "id": "java.lang.Class&lt;unknown&gt;",
      "required": [

      ],
      "properties": {
        "all_perm_domain": {
          "$ref": "java.security.ProtectionDomain"
        },
        "annotation": {
          "format": "int32",
          "type": "integer"
        },
        "annotation_data": {
          "$ref": "java.lang.Class$AnnotationData"
        },
        "annotation_type": {
          "$ref": "sun.reflect.annotation.AnnotationType"
        },
        "cached_constructor": {
          "$ref": "java.lang.reflect.Constructor&lt;unknown&gt;"
        },
        "class_redefined_count": {
          "format": "int32",
          "type": "integer"
        },
        "class_value_map": {
          "type": "ClassValueMap"
        },
        "enum": {
          "format": "int32",
          "type": "integer"
        },
        "enum_constant_directory": {
          "$ref": "java.util.Map&lt;java.lang.String, unknown&gt;"
        },
        "enum_constants": {

        },
        "generic_info": {
          "$ref": "sun.reflect.generics.repository.ClassRepository"
        },
        "initted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "new_instance_caller_cache": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "reflection_data": {
          "$ref": "java.lang.ref.SoftReference&lt;java.lang.Class$ReflectionData&lt;unknown&gt;&gt;"
        },
        "reflection_factory": {
          "$ref": "sun.reflect.ReflectionFactory"
        },
        "serial_persistent_fields": {
          "items": {
            "$ref": "java.io.ObjectStreamField"
          },
          "type": "array"
        },
        "synthetic": {
          "format": "int32",
          "type": "integer"
        },
        "use_caches": {
          "type": "boolean"
        }
      }
    },
    "java.lang.ClassLoader": {
      "id": "java.lang.ClassLoader",
      "required": [

      ],
      "properties": {
        "assertion_lock": {
          "$ref": "java.lang.Object"
        },
        "class_assertion_status": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
        },
        "classes": {
          "items": {
            "$ref": "java.lang.Class&lt;unknown&gt;"
          },
          "type": "array"
        },
        "default_assertion_status": {
          "type": "boolean"
        },
        "default_domain": {
          "$ref": "java.security.ProtectionDomain"
        },
        "loaded_library_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "native_libraries": {
          "items": {
            "$ref": "java.lang.ClassLoader$NativeLibrary"
          },
          "type": "array"
        },
        "native_library_context": {
          "items": {
            "$ref": "java.lang.ClassLoader$NativeLibrary"
          },
          "type": "array"
        },
        "nocerts": {
          "items": {
            "$ref": "java.security.cert.Certificate"
          },
          "type": "array"
        },
        "package2certs": {
          "$ref": "java.util.Map&lt;java.lang.String, [Ljava.security.cert.Certificate;&gt;"
        },
        "package_assertion_status": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;"
        },
        "packages": {
          "$ref": "java.util.HashMap&lt;java.lang.String, java.lang.Package&gt;"
        },
        "parallel_lock_map": {
          "$ref": "java.util.concurrent.ConcurrentHashMap&lt;java.lang.String, java.lang.Object&gt;"
        },
        "parent": {
          "$ref": "java.lang.ClassLoader"
        },
        "scl": {
          "$ref": "java.lang.ClassLoader"
        },
        "scl_set": {
          "type": "boolean"
        },
        "sys_paths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "system_native_libraries": {
          "items": {
            "$ref": "java.lang.ClassLoader$NativeLibrary"
          },
          "type": "array"
        },
        "usr_paths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "java.lang.ClassLoader$NativeLibrary": {
      "id": "java.lang.ClassLoader$NativeLibrary",
      "required": [

      ],
      "properties": {
        "from_class": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "handle": {
          "format": "int64",
          "type": "integer"
        },
        "is_builtin": {
          "type": "boolean"
        },
        "jni_version": {
          "format": "int32",
          "type": "integer"
        },
        "loaded": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "java.lang.Object": {
      "id": "java.lang.Object",
      "required": [

      ],
      "properties": {

      }
    },
    "java.lang.ref.SoftReference&lt;java.lang.Class$ReflectionData&lt;unknown&gt;&gt;": {
      "id": "java.lang.ref.SoftReference&lt;java.lang.Class$ReflectionData&lt;unknown&gt;&gt;",
      "required": [

      ],
      "properties": {
        "clock": {
          "format": "int64",
          "type": "integer"
        },
        "timestamp": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "java.lang.reflect.Constructor&lt;unknown&gt;": {
      "id": "java.lang.reflect.Constructor&lt;unknown&gt;",
      "required": [

      ],
      "properties": {
        "annotations": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "clazz": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "constructor_accessor": {
          "$ref": "sun.reflect.ConstructorAccessor"
        },
        "exception_types": {

        },
        "generic_info": {
          "$ref": "sun.reflect.generics.repository.ConstructorRepository"
        },
        "modifiers": {
          "format": "int32",
          "type": "integer"
        },
        "parameter_annotations": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "parameter_types": {

        },
        "root": {
          "$ref": "java.lang.reflect.Constructor&lt;unknown&gt;"
        },
        "signature": {
          "type": "string"
        },
        "slot": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "java.lang.reflect.Field": {
      "id": "java.lang.reflect.Field",
      "required": [

      ],
      "properties": {
        "annotations": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "clazz": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "declared_annotations": {
          "$ref": "java.util.Map&lt;java.lang.Class&lt;unknown&gt;, java.lang.annotation.Annotation&gt;"
        },
        "field_accessor": {
          "$ref": "sun.reflect.FieldAccessor"
        },
        "generic_info": {
          "$ref": "sun.reflect.generics.repository.FieldRepository"
        },
        "modifiers": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "override_field_accessor": {
          "$ref": "sun.reflect.FieldAccessor"
        },
        "root": {
          "$ref": "java.lang.reflect.Field"
        },
        "signature": {
          "type": "string"
        },
        "slot": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        }
      }
    },
    "java.lang.reflect.Method": {
      "id": "java.lang.reflect.Method",
      "required": [

      ],
      "properties": {
        "annotation_default": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "annotations": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "clazz": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "exception_types": {

        },
        "generic_info": {
          "$ref": "sun.reflect.generics.repository.MethodRepository"
        },
        "method_accessor": {
          "$ref": "sun.reflect.MethodAccessor"
        },
        "modifiers": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parameter_annotations": {
          "items": {
            "format": "byte",
            "type": "string"
          },
          "type": "array"
        },
        "parameter_types": {

        },
        "return_type": {
          "$ref": "java.lang.Class&lt;unknown&gt;"
        },
        "root": {
          "$ref": "java.lang.reflect.Method"
        },
        "signature": {
          "type": "string"
        },
        "slot": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "java.lang.reflect.Type": {
      "id": "java.lang.reflect.Type",
      "required": [

      ],
      "properties": {

      }
    },
    "java.net.InetAddress": {
      "id": "java.net.InetAddress",
      "required": [

      ],
      "properties": {
        "cache": {
          "$ref": "java.util.concurrent.ConcurrentMap&lt;java.lang.String, java.net.InetAddress$Addresses&gt;"
        },
        "cached_local_host": {
          "$ref": "java.net.InetAddress$CachedLocalHost"
        },
        "canonical_host_name": {
          "type": "string"
        },
        "expiry_set": {
          "items": {
            "$ref": "java.net.InetAddress$CachedAddresses"
          },
          "type": "array",
          "uniqueItems": "true"
        },
        "fields_offset": {
          "format": "int64",
          "type": "integer"
        },
        "holder": {
          "$ref": "java.net.InetAddress$InetAddressHolder"
        },
        "impl": {
          "$ref": "java.net.InetAddressImpl"
        },
        "ipv4": {
          "format": "int32",
          "type": "integer"
        },
        "ipv6": {
          "format": "int32",
          "type": "integer"
        },
        "name_services": {
          "items": {
            "$ref": "sun.net.spi.nameservice.NameService"
          },
          "type": "array"
        },
        "prefer_ipv6_address": {
          "type": "boolean"
        },
        "serial_persistent_fields": {
          "items": {
            "$ref": "java.io.ObjectStreamField"
          },
          "type": "array"
        },
        "unsafe": {
          "$ref": "sun.misc.Unsafe"
        }
      }
    },
    "java.net.InetAddress$CachedAddresses": {
      "id": "java.net.InetAddress$CachedAddresses",
      "required": [

      ],
      "properties": {
        "expiry_time": {
          "format": "int64",
          "type": "integer"
        },
        "host": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "inet_addresses": {
          "items": {
            "$ref": "java.net.InetAddress"
          },
          "type": "array"
        },
        "seq": {
          "$ref": "java.util.concurrent.atomic.AtomicLong"
        }
      }
    },
    "java.net.InetAddress$CachedLocalHost": {
      "id": "java.net.InetAddress$CachedLocalHost",
      "required": [

      ],
      "properties": {
        "addr": {
          "$ref": "java.net.InetAddress"
        },
        "expiry_time": {
          "format": "int64",
          "type": "integer"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "java.net.InetAddress$InetAddressHolder": {
      "id": "java.net.InetAddress$InetAddressHolder",
      "required": [

      ],
      "properties": {
        "address": {
          "format": "int32",
          "type": "integer"
        },
        "family": {
          "format": "int32",
          "type": "integer"
        },
        "host_name": {
          "type": "string"
        },
        "original_host_name": {
          "type": "string"
        }
      }
    },
    "java.net.InetAddressImpl": {
      "id": "java.net.InetAddressImpl",
      "required": [

      ],
      "properties": {

      }
    },
    "java.net.SocketPermission": {
      "id": "java.net.SocketPermission",
      "required": [

      ],
      "properties": {
        "accept": {
          "format": "int32",
          "type": "integer"
        },
        "actions": {
          "type": "string"
        },
        "addresses": {
          "items": {
            "$ref": "java.net.InetAddress"
          },
          "type": "array"
        },
        "all": {
          "format": "int32",
          "type": "integer"
        },
        "cdomain": {
          "type": "string"
        },
        "cname": {
          "type": "string"
        },
        "connect": {
          "format": "int32",
          "type": "integer"
        },
        "debug": {
          "$ref": "sun.security.util.Debug"
        },
        "debug_init": {
          "type": "boolean"
        },
        "def_eph_low": {
          "format": "int32",
          "type": "integer"
        },
        "default_deny": {
          "type": "boolean"
        },
        "hdomain": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "init_with_ip": {
          "type": "boolean"
        },
        "invalid": {
          "type": "boolean"
        },
        "listen": {
          "format": "int32",
          "type": "integer"
        },
        "mask": {
          "format": "int32",
          "type": "integer"
        },
        "none": {
          "format": "int32",
          "type": "integer"
        },
        "port_max": {
          "format": "int32",
          "type": "integer"
        },
        "port_min": {
          "format": "int32",
          "type": "integer"
        },
        "portrange": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "priv_port_max": {
          "format": "int32",
          "type": "integer"
        },
        "resolve": {
          "format": "int32",
          "type": "integer"
        },
        "trust_name_service": {
          "type": "boolean"
        },
        "trusted": {
          "type": "boolean"
        },
        "untrusted": {
          "type": "boolean"
        },
        "wildcard": {
          "type": "boolean"
        }
      }
    },
    "java.net.URL": {
      "id": "java.net.URL",
      "required": [

      ],
      "properties": {
        "authority": {
          "type": "string"
        },
        "builtin_handlers_prefix": {
          "type": "string"
        },
        "factory": {
          "$ref": "java.net.URLStreamHandlerFactory"
        },
        "file": {
          "type": "string"
        },
        "handler": {
          "$ref": "java.net.URLStreamHandler"
        },
        "handlers": {
          "$ref": "java.util.Hashtable&lt;java.lang.String, java.net.URLStreamHandler&gt;"
        },
        "hash_code": {
          "format": "int32",
          "type": "integer"
        },
        "host": {
          "type": "string"
        },
        "host_address": {
          "$ref": "java.net.InetAddress"
        },
        "path": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "protocol_path_prop": {
          "type": "string"
        },
        "query": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "serial_persistent_fields": {
          "items": {
            "$ref": "java.io.ObjectStreamField"
          },
          "type": "array"
        },
        "stream_handler_lock": {
          "$ref": "java.lang.Object"
        },
        "temp_state": {
          "$ref": "java.net.UrlDeserializedState"
        },
        "user_info": {
          "type": "string"
        }
      }
    },
    "java.net.URLStreamHandler": {
      "id": "java.net.URLStreamHandler",
      "required": [

      ],
      "properties": {

      }
    },
    "java.net.URLStreamHandlerFactory": {
      "id": "java.net.URLStreamHandlerFactory",
      "required": [

      ],
      "properties": {

      }
    },
    "java.net.UrlDeserializedState": {
      "id": "java.net.UrlDeserializedState",
      "required": [

      ],
      "properties": {
        "authority": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "hash_code": {
          "format": "int32",
          "type": "integer"
        },
        "host": {
          "type": "string"
        },
        "port": {
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "java.security.CodeSigner": {
      "id": "java.security.CodeSigner",
      "required": [

      ],
      "properties": {
        "myhash": {
          "format": "int32",
          "type": "integer"
        },
        "signer_cert_path": {
          "$ref": "java.security.cert.CertPath"
        },
        "timestamp": {
          "$ref": "java.security.Timestamp"
        }
      }
    },
    "java.security.CodeSource": {
      "id": "java.security.CodeSource",
      "required": [

      ],
      "properties": {
        "certs": {
          "items": {
            "$ref": "java.security.cert.Certificate"
          },
          "type": "array"
        },
        "factory": {
          "$ref": "java.security.cert.CertificateFactory"
        },
        "location": {
          "$ref": "java.net.URL"
        },
        "signers": {
          "items": {
            "$ref": "java.security.CodeSigner"
          },
          "type": "array"
        },
        "sp": {
          "$ref": "java.net.SocketPermission"
        }
      }
    },
    "java.security.Permission": {
      "id": "java.security.Permission",
      "required": [

      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "java.security.PermissionCollection": {
      "id": "java.security.PermissionCollection",
      "required": [

      ],
      "properties": {
        "read_only": {
          "type": "boolean"
        }
      }
    },
    "java.security.Principal": {
      "id": "java.security.Principal",
      "required": [

      ],
      "properties": {

      }
    },
    "java.security.ProtectionDomain": {
      "id": "java.security.ProtectionDomain",
      "required": [

      ],
      "properties": {
        "classloader": {
          "$ref": "java.lang.ClassLoader"
        },
        "codesource": {
          "$ref": "java.security.CodeSource"
        },
        "debug": {
          "$ref": "sun.security.util.Debug"
        },
        "has_all_perm": {
          "type": "boolean"
        },
        "key": {
          "$ref": "java.security.ProtectionDomain$Key"
        },
        "permissions": {
          "$ref": "java.security.PermissionCollection"
        },
        "principals": {
          "items": {
            "$ref": "java.security.Principal"
          },
          "type": "array"
        },
        "static_permissions": {
          "type": "boolean"
        }
      }
    },
    "java.security.ProtectionDomain$Key": {
      "id": "java.security.ProtectionDomain$Key",
      "required": [

      ],
      "properties": {
        "this$0": {
          "$ref": "java.security.ProtectionDomain"
        }
      }
    },
    "java.security.Timestamp": {
      "id": "java.security.Timestamp",
      "required": [

      ],
      "properties": {
        "myhash": {
          "format": "int32",
          "type": "integer"
        },
        "signer_cert_path": {
          "$ref": "java.security.cert.CertPath"
        },
        "timestamp": {
          "$ref": "java.util.Date"
        }
      }
    },
    "java.security.cert.CertPath": {
      "id": "java.security.cert.CertPath",
      "required": [

      ],
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "java.security.cert.Certificate": {
      "id": "java.security.cert.Certificate",
      "required": [

      ],
      "properties": {
        "hash": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "java.security.cert.CertificateFactory": {
      "id": "java.security.cert.CertificateFactory",
      "required": [

      ],
      "properties": {
        "cert_fac_spi": {
          "$ref": "java.security.cert.CertificateFactorySpi"
        },
        "provider": {
          "type": "Provider"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "java.security.cert.CertificateFactorySpi": {
      "id": "java.security.cert.CertificateFactorySpi",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Date": {
      "id": "java.util.Date",
      "required": [

      ],
      "properties": {
        "cdate": {
          "$ref": "sun.util.calendar.BaseCalendar$Date"
        },
        "default_century_start": {
          "format": "int32",
          "type": "integer"
        },
        "fast_time": {
          "format": "int64",
          "type": "integer"
        },
        "gcal": {
          "$ref": "sun.util.calendar.BaseCalendar"
        },
        "jcal": {
          "$ref": "sun.util.calendar.BaseCalendar"
        },
        "ttb": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "wtb": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "java.util.HashMap&lt;java.lang.String, java.lang.Package&gt;": {
      "id": "java.util.HashMap&lt;java.lang.String, java.lang.Package&gt;",
      "required": [

      ],
      "properties": {
        "default_initial_capacity": {
          "format": "int32",
          "type": "integer"
        },
        "default_load_factor": {
          "format": "float",
          "type": "number"
        },
        "entry_set": {
          "items": {
            "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
          },
          "type": "array",
          "uniqueItems": "true"
        },
        "load_factor": {
          "format": "float",
          "type": "number"
        },
        "maximum_capacity": {
          "format": "int32",
          "type": "integer"
        },
        "min_treeify_capacity": {
          "format": "int32",
          "type": "integer"
        },
        "mod_count": {
          "format": "int32",
          "type": "integer"
        },
        "size": {
          "format": "int32",
          "type": "integer"
        },
        "table": {

        },
        "threshold": {
          "format": "int32",
          "type": "integer"
        },
        "treeify_threshold": {
          "format": "int32",
          "type": "integer"
        },
        "untreeify_threshold": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "java.util.Hashtable&lt;java.lang.String, java.net.URLStreamHandler&gt;": {
      "id": "java.util.Hashtable&lt;java.lang.String, java.net.URLStreamHandler&gt;",
      "required": [

      ],
      "properties": {
        "count": {
          "format": "int32",
          "type": "integer"
        },
        "entries": {
          "format": "int32",
          "type": "integer"
        },
        "entry_set": {
          "items": {
            "$ref": "java.util.Map$Entry&lt;unknown, unknown&gt;"
          },
          "type": "array",
          "uniqueItems": "true"
        },
        "key_set": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": "true"
        },
        "keys": {
          "format": "int32",
          "type": "integer"
        },
        "load_factor": {
          "format": "float",
          "type": "number"
        },
        "max_array_size": {
          "format": "int32",
          "type": "integer"
        },
        "mod_count": {
          "format": "int32",
          "type": "integer"
        },
        "table": {

        },
        "threshold": {
          "format": "int32",
          "type": "integer"
        },
        "values": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "java.util.Map$Entry&lt;unknown, unknown&gt;": {
      "id": "java.util.Map$Entry&lt;unknown, unknown&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
      "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
      "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.Class&lt;unknown&gt;, java.lang.annotation.Annotation&gt;": {
      "id": "java.util.Map&lt;java.lang.Class&lt;unknown&gt;, java.lang.annotation.Annotation&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;": {
      "id": "java.util.Map&lt;java.lang.Integer, get.dto.appliance.configuration.DiskHardwareConfigDTO&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, [Ljava.security.cert.Certificate;&gt;": {
      "id": "java.util.Map&lt;java.lang.String, [Ljava.security.cert.Certificate;&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
      "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
      "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
      "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, java.lang.Class&lt;unknown&gt;&gt;": {
      "id": "java.util.Map&lt;java.lang.String, java.lang.Class&lt;unknown&gt;&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, java.lang.Object&gt;": {
      "id": "java.util.Map&lt;java.lang.String, java.lang.Object&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
      "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, java.lang.reflect.Method&gt;": {
      "id": "java.util.Map&lt;java.lang.String, java.lang.reflect.Method&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
      "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Map&lt;java.lang.String, unknown&gt;": {
      "id": "java.util.Map&lt;java.lang.String, unknown&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.Optional&lt;java.net.InetAddress&gt;": {
      "id": "java.util.Optional&lt;java.net.InetAddress&gt;",
      "required": [

      ],
      "properties": {
        "empty": {
          "$ref": "java.util.Optional&lt;unknown&gt;"
        },
        "value": {
          "$ref": "java.net.InetAddress"
        }
      }
    },
    "java.util.Optional&lt;unknown&gt;": {
      "id": "java.util.Optional&lt;unknown&gt;",
      "required": [

      ],
      "properties": {
        "empty": {
          "$ref": "java.util.Optional&lt;unknown&gt;"
        },
        "value": {

        }
      }
    },
    "java.util.concurrent.ConcurrentHashMap$CounterCell": {
      "id": "java.util.concurrent.ConcurrentHashMap$CounterCell",
      "required": [

      ],
      "properties": {
        "value": {
          "format": "int64",
          "type": "integer"
        }
      }
    },
    "java.util.concurrent.ConcurrentHashMap&lt;java.lang.String, java.lang.Object&gt;": {
      "id": "java.util.concurrent.ConcurrentHashMap&lt;java.lang.String, java.lang.Object&gt;",
      "required": [

      ],
      "properties": {
        "abase": {
          "format": "int64",
          "type": "integer"
        },
        "ashift": {
          "format": "int32",
          "type": "integer"
        },
        "base_count": {
          "format": "int64",
          "type": "integer"
        },
        "basecount": {
          "format": "int64",
          "type": "integer"
        },
        "cells_busy": {
          "format": "int32",
          "type": "integer"
        },
        "cellsbusy": {
          "format": "int64",
          "type": "integer"
        },
        "cellvalue": {
          "format": "int64",
          "type": "integer"
        },
        "counter_cells": {
          "items": {
            "$ref": "java.util.concurrent.ConcurrentHashMap$CounterCell"
          },
          "type": "array"
        },
        "default_capacity": {
          "format": "int32",
          "type": "integer"
        },
        "default_concurrency_level": {
          "format": "int32",
          "type": "integer"
        },
        "entry_set": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": "true"
        },
        "hash_bits": {
          "format": "int32",
          "type": "integer"
        },
        "key_set": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "uniqueItems": "true"
        },
        "load_factor": {
          "format": "float",
          "type": "number"
        },
        "max_array_size": {
          "format": "int32",
          "type": "integer"
        },
        "max_resizers": {
          "format": "int32",
          "type": "integer"
        },
        "maximum_capacity": {
          "format": "int32",
          "type": "integer"
        },
        "min_transfer_stride": {
          "format": "int32",
          "type": "integer"
        },
        "min_treeify_capacity": {
          "format": "int32",
          "type": "integer"
        },
        "moved": {
          "format": "int32",
          "type": "integer"
        },
        "ncpu": {
          "format": "int32",
          "type": "integer"
        },
        "next_table": {

        },
        "reserved": {
          "format": "int32",
          "type": "integer"
        },
        "resize_stamp_bits": {
          "format": "int32",
          "type": "integer"
        },
        "resize_stamp_shift": {
          "format": "int32",
          "type": "integer"
        },
        "serial_persistent_fields": {
          "items": {
            "$ref": "java.io.ObjectStreamField"
          },
          "type": "array"
        },
        "size_ctl": {
          "format": "int32",
          "type": "integer"
        },
        "sizectl": {
          "format": "int64",
          "type": "integer"
        },
        "table": {

        },
        "transfer_index": {
          "format": "int32",
          "type": "integer"
        },
        "transferindex": {
          "format": "int64",
          "type": "integer"
        },
        "treebin": {
          "format": "int32",
          "type": "integer"
        },
        "treeify_threshold": {
          "format": "int32",
          "type": "integer"
        },
        "u": {
          "$ref": "sun.misc.Unsafe"
        },
        "untreeify_threshold": {
          "format": "int32",
          "type": "integer"
        },
        "values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      }
    },
    "java.util.concurrent.ConcurrentMap&lt;java.lang.String, java.net.InetAddress$Addresses&gt;": {
      "id": "java.util.concurrent.ConcurrentMap&lt;java.lang.String, java.net.InetAddress$Addresses&gt;",
      "required": [

      ],
      "properties": {

      }
    },
    "java.util.concurrent.atomic.AtomicLong": {
      "id": "java.util.concurrent.atomic.AtomicLong",
      "required": [

      ],
      "properties": {
        "unsafe": {
          "$ref": "sun.misc.Unsafe"
        },
        "value": {
          "format": "int64",
          "type": "integer"
        },
        "value_offset": {
          "format": "int64",
          "type": "integer"
        },
        "vm_supports_long_cas": {
          "type": "boolean"
        }
      }
    },
    "org.slf4j.Logger": {
      "id": "org.slf4j.Logger",
      "required": [

      ],
      "properties": {
        "root_logger_name": {
          "type": "string"
        }
      }
    },
    "sun.misc.Unsafe": {
      "id": "sun.misc.Unsafe",
      "required": [

      ],
      "properties": {
        "address_size": {
          "format": "int32",
          "type": "integer"
        },
        "array_boolean_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_boolean_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_byte_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_byte_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_char_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_char_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_double_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_double_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_float_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_float_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_int_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_int_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_long_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_long_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_object_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_object_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "array_short_base_offset": {
          "format": "int32",
          "type": "integer"
        },
        "array_short_index_scale": {
          "format": "int32",
          "type": "integer"
        },
        "invalid_field_offset": {
          "format": "int32",
          "type": "integer"
        },
        "the_unsafe": {
          "$ref": "sun.misc.Unsafe"
        }
      }
    },
    "sun.net.spi.nameservice.NameService": {
      "id": "sun.net.spi.nameservice.NameService",
      "required": [

      ],
      "properties": {

      }
    },
    "sun.reflect.ConstructorAccessor": {
      "id": "sun.reflect.ConstructorAccessor",
      "required": [

      ],
      "properties": {

      }
    },
    "sun.reflect.FieldAccessor": {
      "id": "sun.reflect.FieldAccessor",
      "required": [

      ],
      "properties": {

      }
    },
    "sun.reflect.LangReflectAccess": {
      "id": "sun.reflect.LangReflectAccess",
      "required": [

      ],
      "properties": {

      }
    },
    "sun.reflect.MethodAccessor": {
      "id": "sun.reflect.MethodAccessor",
      "required": [

      ],
      "properties": {

      }
    },
    "sun.reflect.ReflectionFactory": {
      "id": "sun.reflect.ReflectionFactory",
      "required": [

      ],
      "properties": {
        "has_static_initializer_method": {
          "$ref": "java.lang.reflect.Method"
        },
        "inflation_threshold": {
          "format": "int32",
          "type": "integer"
        },
        "initted": {
          "type": "boolean"
        },
        "lang_reflect_access": {
          "$ref": "sun.reflect.LangReflectAccess"
        },
        "no_inflation": {
          "type": "boolean"
        },
        "reflection_factory_access_perm": {
          "$ref": "java.security.Permission"
        },
        "sole_instance": {
          "$ref": "sun.reflect.ReflectionFactory"
        }
      }
    },
    "sun.reflect.annotation.AnnotationType": {
      "id": "sun.reflect.annotation.AnnotationType",
      "required": [

      ],
      "properties": {
        "$assertions_disabled": {
          "type": "boolean"
        },
        "inherited": {
          "type": "boolean"
        },
        "member_defaults": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
        },
        "member_types": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.Class&lt;unknown&gt;&gt;"
        },
        "members": {
          "$ref": "java.util.Map&lt;java.lang.String, java.lang.reflect.Method&gt;"
        },
        "retention": {
          "enum": [
            "SOURCE",
            "CLASS",
            "RUNTIME"
          ],
          "type": "string"
        }
      }
    },
    "sun.reflect.generics.repository.ClassRepository": {
      "id": "sun.reflect.generics.repository.ClassRepository",
      "required": [

      ],
      "properties": {
        "none": {
          "$ref": "sun.reflect.generics.repository.ClassRepository"
        },
        "super_interfaces": {
          "items": {
            "$ref": "java.lang.reflect.Type"
          },
          "type": "array"
        },
        "superclass": {
          "$ref": "java.lang.reflect.Type"
        }
      }
    },
    "sun.reflect.generics.repository.ConstructorRepository": {
      "id": "sun.reflect.generics.repository.ConstructorRepository",
      "required": [

      ],
      "properties": {
        "exception_types": {
          "items": {
            "$ref": "java.lang.reflect.Type"
          },
          "type": "array"
        },
        "param_types": {
          "items": {
            "$ref": "java.lang.reflect.Type"
          },
          "type": "array"
        }
      }
    },
    "sun.reflect.generics.repository.FieldRepository": {
      "id": "sun.reflect.generics.repository.FieldRepository",
      "required": [

      ],
      "properties": {
        "generic_type": {
          "$ref": "java.lang.reflect.Type"
        }
      }
    },
    "sun.reflect.generics.repository.MethodRepository": {
      "id": "sun.reflect.generics.repository.MethodRepository",
      "required": [

      ],
      "properties": {
        "return_type": {
          "$ref": "java.lang.reflect.Type"
        }
      }
    },
    "sun.security.util.Debug": {
      "id": "sun.security.util.Debug",
      "required": [

      ],
      "properties": {
        "args": {
          "type": "string"
        },
        "hex_digits": {
          "items": {
            "$ref": "char"
          },
          "type": "array"
        },
        "prefix": {
          "type": "string"
        }
      }
    },
    "sun.util.calendar.BaseCalendar": {
      "id": "sun.util.calendar.BaseCalendar",
      "required": [

      ],
      "properties": {
        "$assertions_disabled": {
          "type": "boolean"
        },
        "accumulated_days_in_month": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "accumulated_days_in_month_leap": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "april": {
          "format": "int32",
          "type": "integer"
        },
        "august": {
          "format": "int32",
          "type": "integer"
        },
        "base_year": {
          "format": "int32",
          "type": "integer"
        },
        "days_in_month": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "december": {
          "format": "int32",
          "type": "integer"
        },
        "february": {
          "format": "int32",
          "type": "integer"
        },
        "fixed_dates": {
          "items": {
            "format": "int32",
            "type": "integer"
          },
          "type": "array"
        },
        "friday": {
          "format": "int32",
          "type": "integer"
        },
        "january": {
          "format": "int32",
          "type": "integer"
        },
        "july": {
          "format": "int32",
          "type": "integer"
        },
        "june": {
          "format": "int32",
          "type": "integer"
        },
        "march": {
          "format": "int32",
          "type": "integer"
        },
        "may": {
          "format": "int32",
          "type": "integer"
        },
        "monday": {
          "format": "int32",
          "type": "integer"
        },
        "november": {
          "format": "int32",
          "type": "integer"
        },
        "october": {
          "format": "int32",
          "type": "integer"
        },
        "saturday": {
          "format": "int32",
          "type": "integer"
        },
        "september": {
          "format": "int32",
          "type": "integer"
        },
        "sunday": {
          "format": "int32",
          "type": "integer"
        },
        "thursday": {
          "format": "int32",
          "type": "integer"
        },
        "tuesday": {
          "format": "int32",
          "type": "integer"
        },
        "wednesday": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "sun.util.calendar.BaseCalendar$Date": {
      "id": "sun.util.calendar.BaseCalendar$Date",
      "required": [

      ],
      "properties": {
        "cached_fixed_date_jan1": {
          "format": "int64",
          "type": "integer"
        },
        "cached_fixed_date_next_jan1": {
          "format": "int64",
          "type": "integer"
        },
        "cached_year": {
          "format": "int32",
          "type": "integer"
        }
      }
    }
  }
}