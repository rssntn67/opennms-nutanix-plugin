{
    "apiVersion": "v2.0",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v2.0",
    "resourcePath": "/vms",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/vms/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of Virtual Machines.",
                    "notes": "Get a list of Virtual Machines. <br/><br/>Virtual Machine disk information and network information are not included by default as fetching these are expensive operations. These can be included by setting the include_vmdisk_config and include_vmnic_config flags respectively.",
                    "type": "get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;",
                    "nickname": "getVMs",
                    "parameters": [
                        {
                            "name": "include_vm_disk_config",
                            "description": "Whether to include Virtual Machine disk information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "include_vm_nic_config",
                            "description": "Whether to include network information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a Virtual Machine.",
                    "notes": "Create a Virtual Machine with specified configuration. <br/><br/>If a UUID is specified for the Virtual Machine, this operation will be idempotent. <br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createVM",
                    "parameters": [
                        {
                            "description": "Create a Virtual Machine ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VmConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get a list of Virtual Machines.",
                    "notes": "Get details of a specific Virtual Machines. <br/><br/>Virtual Machine disk information and network information are not included by default as fetching these are expensive operations. These can be included by setting the include_vmdisk_config and include_vmnic_config flags respectively.",
                    "type": "get.dto.uhura.VmConfigDTO",
                    "nickname": "getVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_vm_disk_config",
                            "description": "Whether to include Virtual Machine disk information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "include_vm_nic_config",
                            "description": "Whether to include network information.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a Virtual Machine.",
                    "notes": "Delete a Virtual Machine. <br/><br/>This is an idempotent operation. If the Virtual Machine is currently powered on, it will be forcefully powered off. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "delete_snapshots",
                            "description": "Delete Virtual Machine snapshots",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "logical_timestamp",
                            "description": "The Virtual logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a Virtual Machine.",
                    "notes": "Update a Virtual Machine. <br/><br/>Field that are not set or are not specified are ignored. Note that some attributes may not be modifiable while the Virtual Machine is running. For instance, the KVM hypervisor does not support CPU or memory hot-plug. <br/><br/>The hwclockTimezone attribute specifies the VM's hardware clock timezone. Most operating systems assume the system clock is UTC, but some (like Windows) expect the local timezone. Changes to the clock timezone only take effect after a full Virtual Machine power cycle. <br/><br/>This API can be used to reclaim memory from guests using a balloon driver. It is not currently possible to return ballooned memory to a guest. The attempt to reclaim memory may fail if the balloon driver is not installed, or is unable to allocate the requested amount of memory from the guest OS. In this case, the Virtual Machine's memory reservation will be restored to its value from before the balloon attempt. <br/><br/>If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "updateVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Virtual Machine Update Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.uhura.VmConfigDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/clone",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Clone a Virtual Machine.",
                    "notes": "Clone a Virtual Machine from a snapshot or Virtual Machine.<br/><br/>If a UUID is specified for the cloned Virtual Machine, this operation will be idempotent. <br/><br/>If override_network_config is set to true in the clone spec, then the source Virtual Machine's network configuration is overridden by one specified in the nic list. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "cloneVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Clone a Virtual Machine ",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMCloneDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/disks/attach",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Attach disks to Virtual Machine.",
                    "notes": "Attach disks to Virtual Machine.<br/><br/>A disk drive may either be a regular disk drive, or a CD-ROM drive. Only CD-ROM drives may be empty. <br/><br/>By default, regular disk drives are configured on the SCSI bus, and CD-ROM drives are configured on the IDE bus. The user may override this behavior with the deviceBus attribute. By default, a disk drive is placed on the first available bus slot. The user may override this behavior with the deviceIndex attribute. <br/><br/>Disks on the SCSI bus may optionally be configured for passthrough on platforms that support iSCSI. When in passthrough mode, SCSI commands are passed directly to NDFS via iSCSI. When SCSI passthrough is disabled, the hypervisor provides a SCSI emulation layer, and treats the underlying iSCSI target as a block device. By default, SCSI passthrough is enabled for SCSI devices on supported platforms. <br/><br/>If the disk image is cloned from an existing vmdisk or NFS file, the user may specify a minimum size for the resulting clone. This can be used to expand a disk image at clone time. <br/><br/>If the VM is running, the disk is hot-added to the VM. Note that certain buses, like IDE, are not hot-pluggable. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "attachVMDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Info about the virtual disks or CD-Roms to be attached",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VMDiskAttachDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/disks/detach",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Detach disks from Virtual Machine.",
                    "notes": "Detach disks from Virtual Machine.<br/><br/>A disk drive may either be a regular disk drive, or a CD-ROM drive. Only CD-ROM drives may be empty. <br/><br/>By default, regular disk drives are configured on the SCSI bus, and CD-ROM drives are configured on the IDE bus. The user may override this behavior with the deviceBus attribute. By default, a disk drive is placed on the first available bus slot. The user may override this behavior with the deviceIndex attribute. <br/><br/>Disks on the SCSI bus may optionally be configured for passthrough on platforms that support iSCSI. When in passthrough mode, SCSI commands are passed directly to NDFS via iSCSI. When SCSI passthrough is disabled, the hypervisor provides a SCSI emulation layer, and treats the underlying iSCSI target as a block device. By default, SCSI passthrough is enabled for SCSI devices on supported platforms. <br/><br/>If the disk image is cloned from an existing vmdisk or NFS file, the user may specify a minimum size for the resulting clone. This can be used to expand a disk image at clone time. <br/><br/>If the VM is running, the disk is hot-added to the VM. Note that certain buses, like IDE, are not hot-pluggable. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "detachVMDisk",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Info about the virtual disks or CD-Roms to be detached",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VMDiskDetachDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/manage_vm_guest_tools",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Mount and unmount guest tools on a given Virtual Machine.",
                    "notes": "Mount and unmount guest tools on a given Virtual Machine. <br/><br/>If override_guest is set to false and no empty CdRom is available on the guest VM, then the mount operation will fail. If override_guest is set to true then the mount operation succeeds by unmounting a non-empty CdRom.<br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "manageGuestTool",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "VM Guest Tools Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VmGuestToolsDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/nics/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get list of NICs in a Virtual Machine.",
                    "notes": "Get list of NICs in a Virtual Machine. <br/><br/>Address assignments are not included by default as fetching these is an expensive operation. Address assignments can be included by setting include_address_assignments to true.",
                    "type": "get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;",
                    "nickname": "getNics",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_address_assignments",
                            "description": "Include address assignments",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Add a NIC to a Virtual Machine.",
                    "notes": "Add a NIC to a Virtual Machine. <br/><br/> A VM NIC must be associated with a virtual network. It is not possible to change this association. To connect a VM to a different virtual network, it is necessary to create a new NIC. <br/><br/>If the virtual network is managed (see POST /networks/), the NIC must be assigned an IPv4 address at creation time. If the network has no DHCP pool, the user must specify the IPv4 address manually. <br/><br/>If the VM is running, the NIC is hot-added to the VM. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createNic",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "NIC Config Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMNicCreateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/nics/{nic_id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update a NIC for a Virtual Machine.",
                    "notes": "Update a NIC for a Virtual Machine. <br/><br/> A VM NIC must be associated with a MAC address. It is not possible to change this association as the MAC address acts as the NIC's identifier. <br/><br/>If the virtual network is managed (see POST /networks/), the IPv4 address of the NIC can be updated. <br/><br/>If the VM is running, the NIC is hot-added to the VM. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "updateNic",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "nic_id",
                            "description": "Virtual Machine NIC identifier (MAC address)",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "NIC Config Update Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.acropolis.VMNicUpdateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/restore",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Restore a Virtual Machine to a snapshotted state.",
                    "notes": "Restore a Virtual Machine to a snapshotted state. <br/><br/>If the VM is currently running, it will be powered off. Since Virtual Machine snapshots do not include the Virtual Machine memory image, the Virtual Machine will remain powered off after the restore is complete. <br/><br/>A Virtual Machine snapshot may no longer be compatible with the current virtual network configuration. In this case, the user may choose not to restore the Virtual Machine's network adpaters using the restoreNetworkConfig keyword argument. <br/><br/> This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "restoreVM",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Uuid of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Restore Virtual Machine ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMRestoreDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{uuid}/set_power_state/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Set power state of a Virtual Machine.",
                    "notes": "Set power state of a Virtual Machine. <br/><br/>If the Virtual Machine is being powered on and no host is specified, the scheduler will pick the one with the most available CPU and memory that can support the Virtual Machine. Note that no such host may not be available.<br/><br/> If the Virtual Machine is being power cycled, a different host can be specified to start it on. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "setPowerState",
                    "parameters": [
                        {
                            "name": "uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Virtual Machine Power State Info",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.uhura.VMPowerStateDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vm_uuid}/nics/{nic_id}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "DELETE",
                    "summary": "Delete a NIC from a Virtual Machine.",
                    "notes": "Delete a NIC from a Virtual Machine. <br/><br/>If the VM is running, the NIC is hot-removed from the VM. If the NIC to be removed is specified as the boot device in the boot configuration, the boot device configuration will be cleared as a side effect of removing the NIC. <br/><br/>The logical timestamp can optionally be provided for consistency. If a logical timestamp is specified, then this operation will be rejected if the logical timestamp specified is not the value of the Virtual Machine logical timestamp. The logical timestamp can be obtained from the Virtual Machine object. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "deleteNic",
                    "parameters": [
                        {
                            "name": "vm_uuid",
                            "description": "UUID of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "nic_id",
                            "description": "Virtual Machine NIC identifier (MAC address)",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "vm_logical_timestamp",
                            "description": "Virtual Machine Logical timestamp",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Details of a NIC in a Virtual Machine.",
                    "notes": "Details of a NIC in a Virtual Machine. <br/><br/>Address assignments are not included by default as fetching these is an expensive operation. Address assignments can be included by setting include_address_assignments to true.",
                    "type": "get.dto.acropolis.VMNicSpecDTO",
                    "nickname": "getNic",
                    "parameters": [
                        {
                            "name": "vm_uuid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "nic_id",
                            "description": "Virtual Machine NIC identifier (MAC address)",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "include_address_assignments",
                            "description": "Include address assignments",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.acropolis.BootConfigDTO": {
            "id": "create.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "create.dto.acropolis.FileToInjectDTO": {
            "id": "create.dto.acropolis.FileToInjectDTO",
            "required": [],
            "properties": {
                "destination_path": {
                    "description": "Destination path in the VM at which the file specified by source_path should be copied to.",
                    "notes": "Destination path in the VM at which the file specified by sourcePath should be copied to.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "source_path": {
                    "description": "ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...",
                    "notes": "ADSF path of the source file to inject in the VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCloneDTO": {
            "id": "create.dto.acropolis.VMCloneDTO",
            "required": [
                "spec_list"
            ],
            "properties": {
                "spec_list": {
                    "items": {
                        "$ref": "create.dto.acropolis.VMCloneSpecDTO"
                    },
                    "notes": "List of clone specifications",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of the storage container on which the customization config iso files should be created. Must be provided when cluster has more than one container.",
                    "notes": "UUID of the storage container on which the customization config iso files should be created",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "uuid": {
                    "description": "Uuid of the VM to clone.",
                    "notes": "Uuid of the VM to clone.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_customization_config": {
                    "$ref": "create.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCloneSpecDTO": {
            "id": "create.dto.acropolis.VMCloneSpecDTO",
            "required": [
                "name"
            ],
            "properties": {
                "boot_config": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Override the existing boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Override the existing boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "Override the amount of RAM assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the amount of RAM assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Named for the cloned Virtual Machine.",
                    "notes": "Name for the cloned Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Override the number of cores assigned to each VCPUs.",
                    "format": "int64",
                    "notes": "Override the number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Override the number of vCPUs assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the number of vCPUs assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "override_network_config": {
                    "description": "Indicate whether the source Virtual Machine's/snapshot's network configuration with the one specified in the vmNics field. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address assignments.",
                    "notes": "Whether to override the source Virtual Machine's/snapshot's network configuration.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence. This UUID will be used as the vm ID of the target vm.",
                    "notes": "A version 4 UUID that the client may specify for idempotence",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_nics": {
                    "description": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCustomizationConfigDTO": {
            "id": "create.dto.acropolis.VMCustomizationConfigDTO",
            "required": [],
            "properties": {
                "datasource_type": {
                    "description": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided. ISO based datasource supported by Uhura is ConfigDriveV2.",
                    "enum": [
                        "CONFIG_DRIVE_V2"
                    ],
                    "notes": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "files_to_inject_list": {
                    "description": "List of details about files to inject in the VM.",
                    "items": {
                        "$ref": "create.dto.acropolis.FileToInjectDTO"
                    },
                    "notes": "List of details about files to inject in the VM.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "fresh_install": {
                    "description": "Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.",
                    "notes": "Indicates whether the VM to be customized is meant to be freshly installed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "userdata": {
                    "description": "Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided",
                    "notes": "Userdata in string format.",
                    "type": "string",
                    "typeName": "TEXT"
                },
                "userdata_path": {
                    "description": "Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided",
                    "notes": "Userdata source path.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskAddressDTO": {
            "id": "create.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.VMNicCreateDTO": {
            "id": "create.dto.acropolis.VMNicCreateDTO",
            "required": [
                "spec_list"
            ],
            "properties": {
                "spec_list": {
                    "description": "List of specification for NICS to add to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of specification for NICS to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM to create NIC on.",
                    "notes": "UUID of the VM to create NIC on.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.VMNicSpecDTO": {
            "id": "create.dto.acropolis.VMNicSpecDTO",
            "required": [
                "network_uuid"
            ],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMRestoreDTO": {
            "id": "create.dto.acropolis.VMRestoreDTO",
            "required": [
                "snapshot_uuid"
            ],
            "properties": {
                "restore_network_configuration": {
                    "description": "Whether to reset the VM's current networking configuration. If this flag is set, the VM's current network adapters will be replaced with the network adapters specified in the snapshot. Otherwise, the VM's current networking adapters will be retained, and the network adapters specified in the snapshot will be ignored. This is set to 'true' by default.",
                    "notes": "Whether to reset the VM's current networking configuration.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "snapshot_uuid": {
                    "description": "The version 4 UUID of the snapshot from which to restore",
                    "notes": "The version 4 UUID of the snapshot from which to restore",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.GPUConfigDTO": {
            "id": "create.dto.uhura.GPUConfigDTO",
            "required": [
                "device_id",
                "gpu_type"
            ],
            "properties": {
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMDiskAttachDTO": {
            "id": "create.dto.uhura.VMDiskAttachDTO",
            "required": [
                "vm_disks"
            ],
            "properties": {
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_disks": {
                    "description": "Information about the virtual disk or CD-ROM to be attached or detached.",
                    "items": {
                        "$ref": "create.dto.uhura.VMDiskDTO"
                    },
                    "notes": "Information about the virtual disk or CD-ROM to be attached or detached.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMDiskDTO": {
            "id": "create.dto.uhura.VMDiskDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address represented by device bus type and device index.",
                    "notes": "Disk address represented by device bus type and device index.",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive. The default value is 'false'",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'",
                    "notes": "Whether the CD-ROM drive should be empty.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_pass_through": {
                    "description": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.",
                    "notes": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vm_disk_clone": {
                    "$ref": "create.dto.uhura.VmDiskCloneDTO",
                    "description": "Specification for cloning a new disk or snapshot. Only one of 'vmDiskClone' and 'vmDiskCreate' is required per create/update request.",
                    "notes": "Specification for cloning a new disk or snapshot.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_create": {
                    "$ref": "create.dto.uhura.VmDiskCreateDTO",
                    "description": "Specification for creating a new disk. Only one of 'vmCreateSpec' and 'vmCloneSpec' is required per create/update request.",
                    "notes": "Specification for creating a new disk.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMDiskDetachDTO": {
            "id": "create.dto.uhura.VMDiskDetachDTO",
            "required": [
                "vm_disks"
            ],
            "properties": {
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_disks": {
                    "description": "Information about the virtual disk or CD-ROM to be detached.",
                    "items": {
                        "$ref": "create.dto.uhura.VmDiskInfoDTO"
                    },
                    "notes": "Information about the virtual disk or CD-ROM to be detached.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VMPowerStateDTO": {
            "id": "create.dto.uhura.VMPowerStateDTO",
            "required": [
                "transition"
            ],
            "properties": {
                "host_uuid": {
                    "description": "Explicit version 4 host UUID on which to power on the VM. This parameter is only honored for kPowerOn, or kPowerCycle when change host is also requested explicitly.",
                    "notes": "Version 4 Host UUID on which to power on VM",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "transition": {
                    "description": "The desired power state transition",
                    "enum": [
                        "ON",
                        "OFF",
                        "POWERCYCLE",
                        "RESET",
                        "PAUSE",
                        "SUSPEND",
                        "RESUME",
                        "ACPI_SHUTDOWN",
                        "ACPI_REBOOT"
                    ],
                    "notes": "The desired power state transition",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the VM.",
                    "notes": "Uuid of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.VmConfigDTO": {
            "id": "create.dto.uhura.VmConfigDTO",
            "required": [
                "memory_mb",
                "name",
                "num_vcpus"
            ],
            "properties": {
                "boot": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_os": {
                    "description": "Guest OS for VMWare. Applicable only for ESX Vms.",
                    "notes": "Guest OS for VMWare.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_customization_config": {
                    "$ref": "create.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                },
                "vm_disks": {
                    "description": "List of disk specification to add to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.uhura.VMDiskDTO"
                    },
                    "notes": "List of disk specification to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "create.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VmDiskCloneDTO": {
            "id": "create.dto.uhura.VmDiskCloneDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.uhura.VmDiskCreateDTO": {
            "id": "create.dto.uhura.VmDiskCreateDTO",
            "required": [],
            "properties": {
                "size": {
                    "description": "Size of the Virtual Machine disk to be created in bytes.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.",
                    "notes": "UUID of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VmDiskInfoDTO": {
            "id": "create.dto.uhura.VmDiskInfoDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the virtual disk.",
                    "notes": "Address of the virtual disk.",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "notes": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_passthrough": {
                    "description": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "notes": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "shared": {
                    "description": "Whether disk is shared with others VMs or not.",
                    "notes": "Whether disk is shared with others VMs or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "The size of the disk in bytes",
                    "format": "int64",
                    "notes": "The size of the disk in bytes",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "source_disk_address": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "The address of the source disk.",
                    "notes": "The address of the source disk.",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "notes": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.uhura.VmGuestToolsDTO": {
            "id": "create.dto.uhura.VmGuestToolsDTO",
            "required": [
                "operation"
            ],
            "properties": {
                "operation": {
                    "description": "Denotes the kind of guest tools operation,i.e Mount or Unmount.",
                    "enum": [
                        "MOUNT",
                        "UNMOUNT"
                    ],
                    "notes": "Denotes the kind of guest tools operation",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "override_guest": {
                    "description": "Override the Guest OS CDROM lock.",
                    "notes": "Override the Guest OS CDROM lock.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "delete.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.acropolis.VMNicSpecDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.acropolis.VMNicSpecDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.uhura.VmConfigDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.uhura.VmConfigDTO"
                    },
                    "type": "array"
                },
                "error_info": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entity_list": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "end_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "filter_criteria": {
                    "type": "string"
                },
                "grand_total_entities": {
                    "format": "int32",
                    "type": "integer"
                },
                "next_cursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previous_cursor": {
                    "type": "string"
                },
                "search_string": {
                    "type": "string"
                },
                "sort_criteria": {
                    "type": "string"
                },
                "start_index": {
                    "format": "int32",
                    "type": "integer"
                },
                "total_entities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.dto.acropolis.BootConfigDTO": {
            "id": "get.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "get.dto.acropolis.FileToInjectDTO": {
            "id": "get.dto.acropolis.FileToInjectDTO",
            "required": [],
            "properties": {
                "destination_path": {
                    "description": "Destination path in the VM at which the file specified by source_path should be copied to.",
                    "notes": "Destination path in the VM at which the file specified by sourcePath should be copied to.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "source_path": {
                    "description": "ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...",
                    "notes": "ADSF path of the source file to inject in the VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.VMCustomizationConfigDTO": {
            "id": "get.dto.acropolis.VMCustomizationConfigDTO",
            "required": [],
            "properties": {
                "datasource_type": {
                    "description": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided. ISO based datasource supported by Uhura is ConfigDriveV2.",
                    "enum": [
                        "CONFIG_DRIVE_V2"
                    ],
                    "notes": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "files_to_inject_list": {
                    "description": "List of details about files to inject in the VM.",
                    "items": {
                        "$ref": "get.dto.acropolis.FileToInjectDTO"
                    },
                    "notes": "List of details about files to inject in the VM.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "fresh_install": {
                    "description": "Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.",
                    "notes": "Indicates whether the VM to be customized is meant to be freshly installed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "userdata": {
                    "description": "Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided",
                    "notes": "Userdata in string format.",
                    "type": "string",
                    "typeName": "TEXT"
                },
                "userdata_path": {
                    "description": "Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided",
                    "notes": "Userdata source path.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.acropolis.VMDiskAddressDTO": {
            "id": "get.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "disk_label": {
                    "description": "Information about attached disk. Disk label (for example, scsi0:0) where the virtual disk was attached. This indicates the location of the virtual disk within the VM.",
                    "notes": "Information about attached disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.acropolis.VMNicSpecDTO": {
            "id": "get.dto.acropolis.VMNicSpecDTO",
            "required": [],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ip_address": {
                    "description": "IP address for the NIC. Includes both Acropolis assigned IP address as well as learned IP address from thirdparty networks.",
                    "notes": "IP address for the NIC.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "port_id": {
                    "description": "The port id for ESX networks.",
                    "notes": "Port Id.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.GPUConfigDTO": {
            "id": "get.dto.uhura.GPUConfigDTO",
            "required": [],
            "properties": {
                "assignable": {
                    "description": "Whether the GPU can be assigned to a Virtual Machine.",
                    "notes": "Whether the GPU can be assigned to a Virtual Machine.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "device_name": {
                    "description": "Vendor device name of the GPU resource.",
                    "notes": "Vendor device name of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "fraction": {
                    "description": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "format": "int32",
                    "notes": "Fraction of the physical GPU. Only applicable for a vGPU instance.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "frame_buffer_size_bytes": {
                    "description": "GPU framebuffer size in bytes.",
                    "format": "int64",
                    "notes": "GPU framebuffer size.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_mode": {
                    "description": "Current mode of the physical GPU. Not valid on vGPU resources.",
                    "enum": [
                        "UNUSED",
                        "USED_FOR_PASSTHROUGH",
                        "USED_FOR_VIRTUAL"
                    ],
                    "notes": "Current mode of the physical GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_profile": {
                    "description": "Profile of the GPU.",
                    "notes": "Profile of the GPU.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "in_use": {
                    "description": "Whether the GPU resource is in use or not.",
                    "notes": "Whether the GPU resource is in use or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "licenses": {
                    "description": "List of license types associated with this GPU.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of license types.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "max_resolution": {
                    "description": "Maximum resolution per display heads.",
                    "notes": "Maximum resolution per display heads.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_virtual_display_heads": {
                    "description": "Number of supported virtual display heads.",
                    "format": "int32",
                    "notes": "Number of supported virtual display heads.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numa_node": {
                    "description": "The NUMA node where the GPU belongs to.",
                    "format": "int32",
                    "notes": "The NUMA node where the GPU belongs to.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "sbdf": {
                    "description": "Unique device information for the GPU resource.",
                    "notes": "Unique device information for the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vm_uuids": {
                    "description": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of UUIDs of the Virtual Machines where the GPU resource is assigned.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.SerialPortConfigDTO": {
            "id": "get.dto.uhura.SerialPortConfigDTO",
            "required": [],
            "properties": {
                "index": {
                    "description": "The serial port index. Generally limited to the range [0..3], corresponding to COM1 through COM4.",
                    "format": "int32",
                    "notes": "The serial port index.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "type": {
                    "description": "The backing type for this serial port.\nPossible values- null(The serial device is present, but has no backing), server(The serial device is accessible via a websocket.)",
                    "enum": [
                        "NULL",
                        "SERVER"
                    ],
                    "notes": "The backing type for this serial port.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VmConfigDTO": {
            "id": "get.dto.uhura.VmConfigDTO",
            "required": [],
            "properties": {
                "allow_live_migrate": {
                    "description": "Indicates whether the Virtual Machine can be live migrated or not.",
                    "notes": "Indicates whether the Virtual Machine can be live migrated or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "boot": {
                    "$ref": "get.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "cbr_not_capable_reason": {
                    "description": "If set to a non-empty string, this VM should be considered incompatible with DR workflows. Applicable only for AHV VMs. In the future, it will be removed in favor of using tags for identifying service VMs.",
                    "notes": "Reason for not CBR capable",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpus_assigned": {
                    "description": "Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.",
                    "notes": "Indicates whether the requested GPUs have been assigned to the Virtual Machine or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "guest_driver_version": {
                    "description": "Last determined guest driver version.",
                    "notes": "Last determined guest driver version.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "guest_os": {
                    "description": "Guest OS for VMWare. Applicable only for ESX Vms.",
                    "notes": "Guest OS for VMWare.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "host_uuid": {
                    "description": "A version 4 UUID identifying the host on which the Virtual Machine is currently running. If Virtual Machine is powered off, then this field is empty.",
                    "notes": "A version 4 UUID identifying the host on which the Virtual Machine is currently running",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "power_state": {
                    "description": "Current power state of the Virtual Machine.",
                    "enum": [
                        "UNKNOWN",
                        "OFF",
                        "POWERING_ON",
                        "ON",
                        "SHUTTING_DOWN",
                        "POWERING_OFF",
                        "PAUSING",
                        "PAUSED",
                        "SUSPENDING",
                        "SUSPENDED",
                        "RESUMING",
                        "RESETTING",
                        "MIGRATING"
                    ],
                    "notes": "Current power state of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "serial_ports": {
                    "description": "Virtual serial ports.",
                    "items": {
                        "$ref": "get.dto.uhura.SerialPortConfigDTO"
                    },
                    "notes": "Virtual serial ports.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "tools_installer_mounted": {
                    "description": "The VM's current tools installer mount status.",
                    "notes": "The VM's current tools installer mount status.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "tools_running_status": {
                    "description": "The VM's current tools installer running status.",
                    "enum": [
                        "UNKNOWN",
                        "GUEST_TOOLS_EXECUTING_SCRIPTS",
                        "GUEST_TOOLS_NOT_RUNNING",
                        "GUEST_TOOLS_RUNNING"
                    ],
                    "notes": "The VM's current tools installer running status.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_customization_config": {
                    "$ref": "get.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_info": {
                    "description": "List of information of disks for a Virtual Machine.",
                    "items": {
                        "$ref": "get.dto.uhura.VmDiskInfoDTO"
                    },
                    "notes": "List of information of disks for a Virtual Mschine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "get.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "get.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.uhura.VmDiskInfoDTO": {
            "id": "get.dto.uhura.VmDiskInfoDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the virtual disk.",
                    "notes": "Address of the virtual disk.",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Whether the flash mode is enabled for this disk or not.",
                    "notes": "Whether the flash mode is enabled for this disk or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive.",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "notes": "Whether the drive is empty. This field only applies to CD-ROM drives.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_passthrough": {
                    "description": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "notes": "Whether this SCSI disk is attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. Note: This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "shared": {
                    "description": "Whether disk is shared with others VMs or not.",
                    "notes": "Whether disk is shared with others VMs or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "The size of the disk in bytes",
                    "format": "int64",
                    "notes": "The size of the disk in bytes",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "source_disk_address": {
                    "$ref": "get.dto.acropolis.VMDiskAddressDTO",
                    "description": "The address of the source disk.",
                    "notes": "The address of the source disk.",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "notes": "The container in which the backing vmdisk is provisioned. This field is unset when the drive is empty.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "update.dto.acropolis.BootConfigDTO": {
            "id": "update.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "boot_device_order": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "boot_device_type": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "mac_addr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "update.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "update.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "task_uuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.VMDiskAddressDTO": {
            "id": "update.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "device_bus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "device_index": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdisk_uuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volume_group_uuid": {
                    "type": "string"
                }
            }
        },
        "update.dto.acropolis.VMNicSpecDTO": {
            "id": "update.dto.acropolis.VMNicSpecDTO",
            "required": [
                "network_uuid"
            ],
            "properties": {
                "adapter_type": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "mac_address": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "network_uuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "request_ip": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requested_ip_address": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.acropolis.VMNicUpdateDTO": {
            "id": "update.dto.acropolis.VMNicUpdateDTO",
            "required": [
                "nic_spec"
            ],
            "properties": {
                "nic_id": {
                    "description": "ID of the Virtual Machine NIC to be updated. This is basically the MAC address of the NIC.",
                    "notes": "ID of the Virtual Machine NIC to be updated.",
                    "type": "string",
                    "typeName": "ACRO_NIC_ID"
                },
                "nic_spec": {
                    "$ref": "update.dto.acropolis.VMNicSpecDTO",
                    "description": "Specification for the Virtual Machine NIC to be updated.",
                    "notes": "Specification for the Virtual Machine NIC to be updated.",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the Virtual Machine to update the NIC on.",
                    "notes": "UUID of the Virtual Machine to update the NIC on.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.GPUConfigDTO": {
            "id": "update.dto.uhura.GPUConfigDTO",
            "required": [
                "device_id"
            ],
            "properties": {
                "device_id": {
                    "description": "Device ID of the GPU resource.",
                    "format": "int32",
                    "notes": "Device ID of the GPU resource.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "gpu_type": {
                    "description": "Type of the GPU resource.",
                    "enum": [
                        "PASS_THROUGH_GRAPHICS",
                        "PASS_THROUGH_COMPUTE",
                        "VIRTUAL"
                    ],
                    "notes": "Type of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "gpu_vendor": {
                    "description": "Vendor of the GPU resource.",
                    "enum": [
                        "NVIDIA",
                        "INTEL",
                        "AMD"
                    ],
                    "notes": "Vendor of the GPU resource.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.VMDiskDTO": {
            "id": "update.dto.uhura.VMDiskDTO",
            "required": [
                "disk_address"
            ],
            "properties": {
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address represented by device bus type and device index.",
                    "notes": "Disk address represented by device bus type and device index.",
                    "typeName": "DEFAULT"
                },
                "flash_mode_enabled": {
                    "description": "Flash mode enabled or not for the volume",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_cdrom": {
                    "description": "Whether this is a CD-ROM drive. The default value is 'false'",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_empty": {
                    "description": "Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'",
                    "notes": "Whether the CD-ROM drive should be empty.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_scsi_pass_through": {
                    "description": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.",
                    "notes": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "is_thin_provisioned": {
                    "description": "Whether the disk is thin provisioned. This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vm_disk_clone": {
                    "$ref": "update.dto.uhura.VmDiskCloneDTO",
                    "description": "Specification for cloning a new disk or snapshot. Only one of 'vmDiskClone' and 'vmDiskCreate' is required per create/update request.",
                    "notes": "Specification for cloning a new disk or snapshot.",
                    "typeName": "DEFAULT"
                },
                "vm_disk_create": {
                    "$ref": "update.dto.uhura.VmDiskCreateDTO",
                    "description": "Specification for creating a new disk. Only one of 'vmCreateSpec' and 'vmCloneSpec' is required per create/update request.",
                    "notes": "Specification for creating a new disk.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.VmConfigDTO": {
            "id": "update.dto.uhura.VmConfigDTO",
            "required": [],
            "properties": {
                "boot": {
                    "$ref": "update.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "ha_priority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_mb": {
                    "description": "RAM in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memory_reservation_mb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "num_cores_per_vcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int32",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "num_vcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int32",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "Storage container on which the VM configuration files should be created. Required for ESX, Hyper-V. Not applicable for other hypervisors.",
                    "notes": "Storage container on which the VM configuration files should be created.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "timezone": {
                    "description": "The timezone for the VM's hardware clock. Any updates to the timezone will be applied during the next VM power cycle (but not reset). The default is UTC.",
                    "notes": "The timezone for the VM's hardware clock.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "UUID of the VM.",
                    "notes": "UUID of the VM.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpu_reservation_hz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_disks": {
                    "description": "List of disk specification to add to the Virtual Machine.",
                    "items": {
                        "$ref": "update.dto.uhura.VMDiskDTO"
                    },
                    "notes": "List of disk specification to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_features": {
                    "$ref": "java.util.Map&lt;update.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vm_gpus": {
                    "description": "List of GPUs requested for the Virtual Machine. If \"gpus_assigned\" is True, then this field represents the assigned physical GPUs.",
                    "items": {
                        "$ref": "update.dto.uhura.GPUConfigDTO"
                    },
                    "notes": "List of GPUs requested for the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vm_logical_timestamp": {
                    "description": "Logical timestamp specified for consistency. This can be obtained from the Virtual Machine object.",
                    "format": "int64",
                    "notes": "Logical timestamp specified for consistency.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vm_nics": {
                    "description": "List of nics to be added to the Virtual Machine.",
                    "items": {
                        "$ref": "update.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of nics to be added to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.uhura.VmDiskCloneDTO": {
            "id": "update.dto.uhura.VmDiskCloneDTO",
            "required": [],
            "properties": {
                "disk_address": {
                    "$ref": "update.dto.acropolis.VMDiskAddressDTO",
                    "description": "Address of the source disk or image from which to clone. Disk address is represented by vmdisk_uuid or ndfs_filepath.",
                    "notes": "Address of the source disk or image from which to clone.",
                    "typeName": "DEFAULT"
                },
                "minimum_size": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmdisk_uuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshot_group_uuid": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "storage_container_uuid": {
                    "description": "The Uuid of the storage container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the storage container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "update.dto.uhura.VmDiskCreateDTO": {
            "id": "update.dto.uhura.VmDiskCreateDTO",
            "required": [],
            "properties": {
                "size": {
                    "description": "Size of the Virtual Machine disk to be created in bytes.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "storage_container_uuid": {
                    "description": "UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.",
                    "notes": "UUID of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}