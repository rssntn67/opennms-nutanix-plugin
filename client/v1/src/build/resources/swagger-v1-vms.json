{
    "apiVersion": "v1",
    "swaggerVersion": "1.2",
    "basePath": "https://any_cvm_ip:9440/PrismGateway/services/rest/v1",
    "resourcePath": "/vms",
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "apis": [
        {
            "internal": false,
            "path": "/vms/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of VMs.",
                    "notes": "Get the list of VMs configured in the cluster.",
                    "type": "get.base.EntityCollection&lt;get.dto.stats.VMDTO&gt;",
                    "nickname": "getVMs",
                    "parameters": [
                        {
                            "name": "count",
                            "description": "Number of VMs to retrieve",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "filterCriteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "sortCriteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "searchString",
                            "description": "Search string",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "searchAttributeList",
                            "description": "Search attribute list",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create a Virtual Machine.",
                    "notes": "Create a Virtual Machine with specified configuration. <br/><br/>If a UUID is specified for the Virtual Machine, this operation will be idempotent. <br/><br/>This is an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "createVM",
                    "parameters": [
                        {
                            "description": "Create a Virtual Machine ",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMCreateDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/alerts",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on any VM.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getVMAlerts",
                    "parameters": [
                        {
                            "name": "startTimeInUsecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "endTimeInUsecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alertTypeUuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/events",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on any VM.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getVMEvents",
                    "parameters": [
                        {
                            "name": "startTimeInUsecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "endTimeInUsecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/guest_tools/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "List Nutanix Guest Tools.",
                    "notes": "To get Nutanix Guest Tools for vms which have givenapplications enabled.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.ngt.NutanixGuestToolsDTO"
                    },
                    "nickname": "listNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "applicationNames",
                            "description": "Comma separated list of application names. If no application name given all entities will be returned.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "vmNames",
                            "description": "Comma separated list of vm names.",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/health_check_summary",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the health check summary for VMs.",
                    "notes": "",
                    "type": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
                    "nickname": "getHealthCheckSummaryForVMs",
                    "parameters": [
                        {
                            "name": "filterCriteria",
                            "description": "Filter criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "detailedSummary",
                            "description": "Detailed summary",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get VM.",
                    "notes": "Get VM with the specified Id.",
                    "type": "get.dto.stats.VMDTO",
                    "nickname": "getVM",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of the VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/alerts",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of alerts generated on a specified VM.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getAlertsForVM",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of a VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "startTimeInUsecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "endTimeInUsecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of alerts",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "resolved",
                            "description": "Alerts which have been resolved",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Alerts which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "severity",
                            "description": "Alert severities",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "alertTypeUuid",
                            "description": "Alert type ids",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/events",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of events generated on a specified VM.",
                    "notes": "",
                    "type": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
                    "nickname": "getEventsForVM",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of a VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "startTimeInUsecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "endTimeInUsecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "count",
                            "description": "Maximum number of events",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "acknowledged",
                            "description": "Events which have been acknowledged",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "boolean"
                        },
                        {
                            "name": "page",
                            "description": "Page number",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/fingerprint_on_write",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Update fingerPrintOnWrite on all VDisks of a VM.",
                    "notes": "Update fingerPrintOnWrite on all VDisks of specified VM.",
                    "type": "create.dto.stats.VMDTO",
                    "nickname": "updatefingerPrintOnWriteInVM",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Uuid of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Finger Print on Write",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/guest_tools/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get Nutanix Guest Tools.",
                    "notes": "Get Nutanix Guest Tools for given VM .",
                    "type": "get.dto.ngt.NutanixGuestToolsDTO",
                    "nickname": "getNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PATCH",
                    "summary": "Update Nutanix Guest Tools.",
                    "notes": "Update Nutanix Guest Tools.",
                    "type": "patch.dto.ngt.NutanixGuestToolsDTO",
                    "nickname": "patchNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Details of Nutanix Guest Tools to update",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "patch.dto.RequestDTO&lt;patch.dto.ngt.NutanixGuestToolsDTO&gt;"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Create Nutanix Guest Tools.",
                    "notes": "Create Nutanix Guest Tools.",
                    "type": "create.dto.ngt.NutanixGuestToolsDTO",
                    "nickname": "createNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Details of Nutanix Guest Tools to create",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.ngt.NutanixGuestToolsDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                },
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "PUT",
                    "summary": "Update Nutanix Guest Tools.",
                    "notes": "Update Nutanix Guest Tools.",
                    "type": "update.dto.ngt.NutanixGuestToolsDTO",
                    "nickname": "updateNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Details of Nutanix Guest Tools to update",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "update.dto.ngt.NutanixGuestToolsDTO"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/guest_tools/mount",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Mount Nutanix Guest Tools.",
                    "notes": "Mount Nutanix Guest Tools.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "mountNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/guest_tools/unmount",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Unmount Nutanix Guest Tools.",
                    "notes": "Unmount Nutanix Guest Tools.",
                    "type": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
                    "nickname": "unmountNutanixGuestTools",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/on_disk_dedup",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Update OnDiskDedup on all VDisks of a VM.",
                    "notes": "Update OnDiskDedup on all VDisks of specified VM.",
                    "type": "create.dto.stats.VMDTO",
                    "nickname": "updateonDiskDedup",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Uuid of Virtual machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "On Disk Dedup",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/snapshots",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get all snapshots of a VM.",
                    "notes": "Get all snapshots of a VM.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.dr.QueryVMSnapshotInfoDTO"
                    },
                    "nickname": "getSnapshotsOfVM",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of the VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/snapshots/{snapId}",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get snapshot info for given snapshot of a VM.",
                    "notes": "Get snapshot info for given snapshot of a VM.",
                    "type": "get.dto.dr.QueryVMSnapshotInfoDTO",
                    "nickname": "getSnapshotOfVM",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of the VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "snapId",
                            "description": "Id of the snapshot",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/stats/",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the stats for a specified VM.",
                    "notes": "If start time and end time are included in the query string, then historical stats are retrieved. Otherwise, the latest stats are retrieved.",
                    "type": "get.base.StatsResponse",
                    "nickname": "getVMStats",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of the VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "metrics",
                            "description": "List of metrics",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        {
                            "name": "startTimeInUsecs",
                            "description": "Start time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "endTimeInUsecs",
                            "description": "End time in microseconds",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        },
                        {
                            "name": "intervalInSecs",
                            "description": "Sampling interval of stats",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/vdisks",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of VDisks.",
                    "notes": "Get the list of VDisks attached to the specified VM.",
                    "type": "array",
                    "items": {
                        "$ref": "get.dto.appliance.configuration.VDiskDTO"
                    },
                    "nickname": "getVDisksInVm",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Id of the VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmId}/virtual_disks",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "GET",
                    "summary": "Get the list of VirtualDisks.",
                    "notes": "Get the list of VirtualDisks attached to the specified VM.",
                    "type": "get.base.EntityCollection&lt;get.dto.appliance.configuration.VirtualDiskDTO&gt;",
                    "nickname": "getVirtualDisksInVm",
                    "parameters": [
                        {
                            "name": "vmId",
                            "description": "Uuid of the VM",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "name": "sortCriteria",
                            "description": "Sort criteria",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        },
                        {
                            "name": "projection",
                            "description": "Projections on the attributes",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "query",
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Any internal exception while performing this operation"
                        }
                    ]
                }
            ]
        },
        {
            "internal": false,
            "path": "/vms/{vmid}/clone",
            "operations": [
                {
                    "deprecated": "false",
                    "internal": false,
                    "method": "POST",
                    "summary": "Clone a Virtual Machine.",
                    "notes": "Clone a Virtual Machine from a snapshot or Virtual Machine.<br/><br/>If a UUID is specified for the cloned Virtual Machine, this operation will be idempotent. <br/><br/>If overrideNetworkConfig is set to true in the clone spec, then the source Virtual Machine's network configuration is overridden by one specified in the nic list. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address. <br/><br/>This is also an asynchronous operation that results in the creation of a task object. The UUID of this task object is returned as the response of this operation. This task can be monitored by using the /tasks/poll API.",
                    "type": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
                    "nickname": "cloneVM",
                    "parameters": [
                        {
                            "name": "vmid",
                            "description": "Id of the Virtual Machine",
                            "required": true,
                            "allowMultiple": false,
                            "paramType": "path",
                            "type": "string"
                        },
                        {
                            "description": "Clone a Virtual Machine ",
                            "required": false,
                            "allowMultiple": false,
                            "paramType": "body",
                            "type": "create.dto.acropolis.VMCloneDTO"
                        }
                    ],
                    "responseMessages": []
                }
            ]
        }
    ],
    "models": {
        "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.Boolean&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "create.dto.PrimitiveDTO&lt;java.lang.String&gt;": {
            "id": "create.dto.PrimitiveDTO&lt;java.lang.String&gt;",
            "required": [],
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.BootConfigDTO": {
            "id": "create.dto.acropolis.BootConfigDTO",
            "required": [],
            "properties": {
                "bootDeviceOrder": {
                    "description": "The boot device order. In case boot device is not specified or the specified boot device fails, VM will attempt to boot from connected devices in this device type order.",
                    "items": {
                        "enum": [
                            "CDROM",
                            "DISK",
                            "NIC"
                        ],
                        "type": "string"
                    },
                    "notes": "Boot device order",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "bootDeviceType": {
                    "description": "The device from which to boot. This must refer to a valid device configured on the VM. When a boot device is removed from the VM, this field is cleared as a side effect. If no boot device is configured, the VM will have the following boot preference: hard disk, CD-ROM, NIC.",
                    "enum": [
                        "CDROM",
                        "DISK",
                        "NIC"
                    ],
                    "notes": "Device from which to boot",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "diskAddress": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address selected as boot device. At most one of this or macAddr field should be set.",
                    "notes": "Disk address selected as boot device",
                    "typeName": "DEFAULT"
                },
                "macAddr": {
                    "description": "Mac address of the NIC selected as boot device. At most one of this or diskAddress field should be set.",
                    "notes": "Mac address of the NIC selected as boot device",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                }
            }
        },
        "create.dto.acropolis.FileToInjectDTO": {
            "id": "create.dto.acropolis.FileToInjectDTO",
            "required": [],
            "properties": {
                "destinationPath": {
                    "description": "Destination path in the VM at which the file specified by source_path should be copied to.",
                    "notes": "Destination path in the VM at which the file specified by sourcePath should be copied to.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "sourcePath": {
                    "description": "ADSF path of the source file to inject in the VM. Must be of form: adsf:///<ctr>/...",
                    "notes": "ADSF path of the source file to inject in the VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.ReturnValueDTO$TaskIdDTO": {
            "id": "create.dto.acropolis.ReturnValueDTO$TaskIdDTO",
            "required": [],
            "properties": {
                "taskUuid": {
                    "description": "UUID of the task.",
                    "notes": "UUID of the task.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCloneDTO": {
            "id": "create.dto.acropolis.VMCloneDTO",
            "required": [
                "specList"
            ],
            "properties": {
                "containerUuid": {
                    "description": "UUID of the container on which the customization config iso files should be created. Must be provided when cluster has more than one container.",
                    "notes": "UUID of the container on which the customization config iso files should be created",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "specList": {
                    "items": {
                        "$ref": "create.dto.acropolis.VMCloneSpecDTO"
                    },
                    "notes": "List of clone specifications",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "Uuid of the VM to clone.",
                    "notes": "Uuid of the VM to clone.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vmCustomizationConfig": {
                    "$ref": "create.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCloneSpecDTO": {
            "id": "create.dto.acropolis.VMCloneSpecDTO",
            "required": [
                "name"
            ],
            "properties": {
                "bootConfig": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Override the existing boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Override the existing boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "memoryMb": {
                    "description": "Override the amount of RAM assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the amount of RAM assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "Named for the cloned Virtual Machine.",
                    "notes": "Name for the cloned Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "numCoresPerVcpu": {
                    "description": "Override the number of cores assigned to each VCPUs.",
                    "format": "int64",
                    "notes": "Override the number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numVcpus": {
                    "description": "Override the number of vCPUs assigned to the clone.",
                    "format": "int64",
                    "notes": "Override the number of vCPUs assigned to the clone.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "overrideNetworkConfig": {
                    "description": "Indicate whether the source Virtual Machine's/snapshot's network configuration with the one specified in the vmNics field. If false, the clone will inherit its basic network configuration from the source, minus MAC and IP address assignments.",
                    "notes": "Whether to override the source Virtual Machine's/snapshot's network configuration.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence. This UUID will be used as the vm ID of the target vm.",
                    "notes": "A version 4 UUID that the client may specify for idempotence",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vmNics": {
                    "description": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "Network configuration. Required when overrideNetworkConfig set to true.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCreateDTO": {
            "id": "create.dto.acropolis.VMCreateDTO",
            "required": [
                "name",
                "numVcpus",
                "memoryMb"
            ],
            "properties": {
                "bootConfig": {
                    "$ref": "create.dto.acropolis.BootConfigDTO",
                    "description": "Boot configuration for the Virtual Machine. Any updates to the boot configuration will be applied during the next Virtual Machine power cycle but not reset.",
                    "notes": "Boot configuration for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "containerUuid": {
                    "description": "UUID of the container on which the customization config iso files should be created. Must be provided when cluster has more than one container.",
                    "notes": "UUID of the container on which the customization config iso files should be created",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "description": {
                    "description": "Description for the Virtual Machine.",
                    "notes": "Description for the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "haPriority": {
                    "description": "Priority for restarting in case of HA event.",
                    "format": "int64",
                    "notes": "Priority for restarting in case of HA event. Negative value indicates do not restart.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "hostId": {
                    "description": "UUID of the host where the Virtual Machine needs to be placed. Either this or hypervisorType needs to be specified.",
                    "notes": "UUID of the host where the Virtual Machine needs to be placed.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "hypervisorType": {
                    "description": "The hypervisor type for the Virtual Machine placement.Possible values are VMware, Hyperv and Acropolis. Either this or hostId needs to be specified.",
                    "enum": [
                        "ACROPOLIS",
                        "NULL",
                        "AHV",
                        "HYPERV",
                        "VMWARE",
                        "XEN",
                        "ESX",
                        "KVM"
                    ],
                    "notes": "The hypervisor type for the Virtual Machine placement.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "memoryMb": {
                    "description": "RAM, in megabytes assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "memoryReservationMb": {
                    "description": "RAM, in megabytes reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "RAM, in megabytes reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "name": {
                    "description": "The Virtual Machine human readable name.",
                    "notes": "The Virtual Machine human readable name.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "numCoresPerVcpu": {
                    "description": "Number of cores assigned to each VCPUs.",
                    "format": "int64",
                    "notes": "Number of cores assigned to each VCPUs.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "numVcpus": {
                    "description": "Number of VCPUs assigned to the Virtual Machine.",
                    "format": "int64",
                    "notes": "Number of VCPUs assigned to the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "uuid": {
                    "description": "A version 4 UUID that the client may specify for idempotence",
                    "notes": "A version 4 UUID that the client may specify for idempotence",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vcpuReservationHz": {
                    "description": "CPU, in Hertz reserved for the Virtual Machine.",
                    "format": "int64",
                    "notes": "CPU, in Hertz reserved for the Virtual Machine.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "vmCustomizationConfig": {
                    "$ref": "create.dto.acropolis.VMCustomizationConfigDTO",
                    "description": "Vm customization configuration. At boot time, this config will be replayed by VM customization tool(cloudinit/sysprep) installed in the VM to bring VM to the state defined by this config.",
                    "notes": "Vm customization configuration.",
                    "typeName": "DEFAULT"
                },
                "vmDisks": {
                    "description": "List of disk specification to add to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMDiskDTO"
                    },
                    "notes": "List of disk specification to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "vmNics": {
                    "description": "List of NIC specification to add to the Virtual Machine.",
                    "items": {
                        "$ref": "create.dto.acropolis.VMNicSpecDTO"
                    },
                    "notes": "List of NIC specification to add to the Virtual Machine.",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMCustomizationConfigDTO": {
            "id": "create.dto.acropolis.VMCustomizationConfigDTO",
            "required": [],
            "properties": {
                "datasourceType": {
                    "description": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided. ISO based datasource supported by Uhura is ConfigDriveV2.",
                    "enum": [
                        "CONFIG_DRIVE_V2"
                    ],
                    "notes": "The type of datasource for configuring the Linux Virtual Machine in case cloudinit config is provided.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "filesToInjectList": {
                    "description": "List of details about files to inject in the VM.",
                    "items": {
                        "$ref": "create.dto.acropolis.FileToInjectDTO"
                    },
                    "notes": "List of details about files to inject in the VM.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "freshInstall": {
                    "description": "Indicates whether the VM to be customized is meant to be freshly installed via Windows Setup from a Windows OS DVD or whether the VM will be configured from a 'Sysprepped' image in which case the setup was already complete.",
                    "notes": "Indicates whether the VM to be customized is meant to be freshly installed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "userdata": {
                    "description": "Userdata in string format. Either Cloudinit format for customizing Linux VM or Sysprep format for customizing Windows VM. For cloudinit the userdata is usually a yaml file or shell script. For sysprep the userdata is usually a Xml representation of an unattend file in string format.Either this or userdataPath must be provided",
                    "notes": "Userdata in string format.",
                    "type": "string",
                    "typeName": "TEXT"
                },
                "userdataPath": {
                    "description": "Userdata source path. Must begin with adsf:///<ctr>.For cloudinit usually a yaml file or shell script is provided. For sysprep usually an unattend file or answer file is provided. Either this or userdata must be provided",
                    "notes": "Userdata source path.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskAddressDTO": {
            "id": "create.dto.acropolis.VMDiskAddressDTO",
            "required": [],
            "properties": {
                "deviceBus": {
                    "description": "The device bus for the virtual disk device.Possible values are SCSI, IDE and PCI. Along with this the deviceIndex is used to specify a vdisk address. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "enum": [
                        "SCSI",
                        "IDE",
                        "PCI",
                        "SATA",
                        "SPAPR"
                    ],
                    "notes": "The device bus for the virtual disk device.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "deviceIndex": {
                    "description": "Index of the device on the adapter type. If left unspecified, the system will allocate the next available slot on the default bus.",
                    "format": "int32",
                    "notes": "Index of the device on the adapter type.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfsFilepath": {
                    "description": "NDFS path to existing virtual disk. This field will not be set when this message is used in a create mode.When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "NDFS path to existing virtual disk.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmdiskUuid": {
                    "description": "Virtual disk identifier. This field will not be set when this message is used in a create mode. When specifying a vmdisk address, then only one of the following combinations of fields must be set - (device_bus, device_index) or vmdisk_uuid or ndfs_filepath.",
                    "notes": "Virtual disk identifier.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "volumeGroupUuid": {
                    "type": "string"
                }
            }
        },
        "create.dto.acropolis.VMDiskDTO": {
            "id": "create.dto.acropolis.VMDiskDTO",
            "required": [],
            "properties": {
                "diskAddress": {
                    "$ref": "create.dto.acropolis.VMDiskAddressDTO",
                    "description": "Disk address represented by device bus type and device index.",
                    "notes": "Disk address represented by device bus type and device index.",
                    "typeName": "DEFAULT"
                },
                "isCdrom": {
                    "description": "Whether this is a CD-ROM drive. The default value is 'false'",
                    "notes": "Whether this is a CD-ROM drive.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "isEmpty": {
                    "description": "Whether the drive should be empty. This field only applies to CD-ROM drives, otherwise it is ignored. If this field is set to true and the drive is a CD-ROM, then the disk creation field 'vmDiskCreate' should be ignored. The default value is 'false'",
                    "notes": "Whether the CD-ROM drive should be empty.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "isScsiPassThrough": {
                    "description": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI. The default value is true.",
                    "notes": "Whether the SCSI disk should be attached in passthrough mode to pass all SCSI commands directly to Stargate via iSCSI.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "isThinProvisioned": {
                    "description": "Whether the disk is thin provisioned. This field applies to only ESX managed VMs.",
                    "notes": "Whether the disk is thin provisioned.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vmDiskClone": {
                    "$ref": "create.dto.acropolis.VMDiskSpecCloneDTO",
                    "description": "Specification for cloning a new disk or snapshot. Only one of 'vmCloneSpec' and 'vmCreateSpec' is required per create/update request.",
                    "notes": "Specification for cloning a new disk or snapshot.",
                    "typeName": "DEFAULT"
                },
                "vmDiskCreate": {
                    "$ref": "create.dto.acropolis.VmDiskSpecCreateDTO",
                    "description": "Specification for creating a new disk. Only one of 'vmCreateSpec' and 'vmCloneSpec' is required per create/update request.",
                    "notes": "Specification for creating a new disk.",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VMDiskSpecCloneDTO": {
            "id": "create.dto.acropolis.VMDiskSpecCloneDTO",
            "required": [],
            "properties": {
                "containerUuid": {
                    "description": "The Uuid of the container in which the specified image or vmdisk is stored. If the source is a vmdisk, this field is recommended, but optional. If the source is a snapshot vmdisk, this field is required. If the source is an absolute image path, this field is prohibited. If the source is a relative image path, this field is required.",
                    "notes": "The Uuid of the container in which the specified image or vmdisk is stored.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "imagePath": {
                    "description": "Path of the image to clone from. If this is specified, then 'vmDiskUUID' should not be specified.",
                    "notes": "Path of the image to clone from.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "minimumSize": {
                    "description": "The minimum size of the resulting clone in bytes. This should only be specified if 'vmDiskUUID' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "minimumSizeMb": {
                    "description": "The minimum size of the resulting clone in MiB. This should only be specified if 'vmdiskUuid' is specified.",
                    "format": "int64",
                    "notes": "The minimum size of the resulting clone in MiB.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "ndfs_filepath": {
                    "description": "Path of the image to clone from. If this is specified, then 'vmDiskUUID' should not be specified.",
                    "notes": "Path of the image to clone from.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "snapshotGroupId": {
                    "description": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "notes": "UUID of the snapshot consistency group from which to clone a snapshot vmdisk.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vmDiskUuid": {
                    "description": "UUID of the Virtual Machine disk to clone from. If this is specified, then 'imagePath' should not be specified.",
                    "notes": "UUID of the Virtual Machine disk to clone from.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "vmdisk_uuid": {
                    "description": "UUID of the Virtual Machine disk to clone from. If this is specified, then 'imagePath' should not be specified.",
                    "notes": "UUID of the Virtual Machine disk to clone from.",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                }
            }
        },
        "create.dto.acropolis.VMNicSpecDTO": {
            "id": "create.dto.acropolis.VMNicSpecDTO",
            "required": [
                "networkUuid"
            ],
            "properties": {
                "adapterType": {
                    "description": "Type of the network adapter for ESX networks.",
                    "enum": [
                        "E1000",
                        "E1000e",
                        "PCNet32",
                        "Vmxnet",
                        "Vmxnet2",
                        "Vmxnet3",
                        "Unsupported"
                    ],
                    "notes": "Type of the network adapter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "macAddress": {
                    "description": "The MAC address of the NIC",
                    "notes": "The MAC address of the NIC",
                    "type": "string",
                    "typeName": "MAC_ADDRESS"
                },
                "model": {
                    "description": "Virtual hardware model.",
                    "notes": "Virtual hardware model.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "networkUuid": {
                    "description": "The network to which the NIC is attached",
                    "notes": "The network to which the NIC is attached",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "requestIp": {
                    "description": "If request_ip is true\nIf 'requestedIpAddress' is set then request that IP from the network. If it's a managed network then request a dynamic IP from the network. Otherwise don't request an IP. If requestIp is false, then don't request an IP at all, regardless of whether or not the 'requestedIpAddress' is set and whether or the network is managed or not.",
                    "notes": "Request IP address.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "requestedIpAddress": {
                    "description": "Requested IP address.",
                    "notes": "Requested IP address.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.acropolis.VmDiskSpecCreateDTO": {
            "id": "create.dto.acropolis.VmDiskSpecCreateDTO",
            "required": [],
            "properties": {
                "containerId": {
                    "description": "Id of container to create disk in. If this is specified, then Container Name and UUID should not be specified.",
                    "format": "int64",
                    "notes": "Id of container to create disk in.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "containerName": {
                    "description": "Name of container to create disk in. If this is specified, then Container ID and UUID should not be specified.",
                    "notes": "Name of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "containerUuid": {
                    "description": "UUID of container to create disk in. If this is specified, then Container Name and ID should not be specified.",
                    "notes": "UUID of container to create disk in.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "size": {
                    "description": "Size of the Virtual Machine disk to be created in bytes.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in bytes.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "sizeMb": {
                    "description": "Size of the Virtual Machine disk to be created in MiB.",
                    "format": "int64",
                    "notes": "Size of the Virtual Machine disk to be created in MiB.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.alerts.AlertSummaryDTO": {
            "id": "create.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alertSummaries": {
                    "$ref": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "create.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checksInError": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailedCheckSummary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entityType": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filterCriteria": {
                    "type": "string"
                },
                "healthSummary": {
                    "$ref": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "create.dto.health.check.HealthSummaryDTO": {
            "id": "create.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entityTypeSummaries": {
                    "items": {
                        "$ref": "create.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "healthCheckSummaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "healthStatus": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "create.dto.ngt.NutanixGuestToolsDTO": {
            "id": "create.dto.ngt.NutanixGuestToolsDTO",
            "required": [],
            "properties": {
                "applications": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "Map of application names and is it enabled.",
                    "notes": "Map of application names and is it enabled.",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Nutanix Guest Tools are enabled or not.",
                    "notes": "Nutanix Guest Tools are enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vmUuid": {
                    "description": "UUID of the Virtual Machine.",
                    "notes": "UUID of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "create.dto.stats.VMDTO": {
            "id": "create.dto.stats.VMDTO",
            "required": [],
            "properties": {
                "acropolisVm": {
                    "type": "boolean"
                },
                "alertSummary": {
                    "$ref": "create.dto.alerts.AlertSummaryDTO"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "consistencyGroupName": {
                    "type": "string"
                },
                "containerIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "containerUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "controllerVm": {
                    "type": "boolean"
                },
                "cpuReservedInHz": {
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "diskCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "displayable": {
                    "type": "boolean"
                },
                "fingerPrintOnWrite": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "gpusInUse": {
                    "type": "boolean"
                },
                "guestOperatingSystem": {
                    "type": "string"
                },
                "healthSummary": {
                    "$ref": "create.dto.health.check.HealthSummaryDTO"
                },
                "hostId": {
                    "type": "string"
                },
                "hostName": {
                    "type": "string"
                },
                "hostUuid": {
                    "type": "string"
                },
                "hypervisorType": {
                    "type": "string"
                },
                "ipAddresses": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "memoryCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "memoryReservedCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "nonNdfsDetails": {
                    "type": "string"
                },
                "numNetworkAdapters": {
                    "format": "int64",
                    "type": "integer"
                },
                "numVCpus": {
                    "format": "int32",
                    "type": "integer"
                },
                "nutanixGuestTools": {
                    "$ref": "create.dto.ngt.NutanixGuestToolsDTO"
                },
                "nutanixVirtualDiskIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nutanixVirtualDiskUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nutanixVirtualDisks": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "onDiskDedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "powerState": {
                    "type": "string"
                },
                "protectionDomainName": {
                    "type": "string"
                },
                "protectionType": {
                    "type": "string"
                },
                "runningOnNdfs": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usageStats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "vdiskFilePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "virtualNicIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "virtualNicUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "vmFeatures": {
                    "$ref": "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vmId": {
                    "type": "string"
                },
                "vmName": {
                    "type": "string"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor"
                    },
                    "type": "array"
                },
                "errorInfo": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO"
                    },
                    "type": "array"
                },
                "errorInfo": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.appliance.configuration.VirtualDiskDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.appliance.configuration.VirtualDiskDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.appliance.configuration.VirtualDiskDTO"
                    },
                    "type": "array"
                },
                "errorInfo": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.EntityCollection&lt;get.dto.stats.VMDTO&gt;": {
            "id": "get.base.EntityCollection&lt;get.dto.stats.VMDTO&gt;",
            "required": [],
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "get.dto.stats.VMDTO"
                    },
                    "type": "array"
                },
                "errorInfo": {
                    "$ref": "get.base.ErrorInfo"
                },
                "metadata": {
                    "$ref": "get.base.Metadata"
                }
            }
        },
        "get.base.ErrorInfo": {
            "id": "get.base.ErrorInfo",
            "required": [],
            "properties": {
                "count": {
                    "format": "int64",
                    "type": "integer"
                },
                "entityList": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "get.base.Metadata": {
            "id": "get.base.Metadata",
            "required": [],
            "properties": {
                "count": {
                    "format": "int32",
                    "type": "integer"
                },
                "endIndex": {
                    "format": "int32",
                    "type": "integer"
                },
                "filterCriteria": {
                    "type": "string"
                },
                "grandTotalEntities": {
                    "format": "int32",
                    "type": "integer"
                },
                "nextCursor": {
                    "type": "string"
                },
                "page": {
                    "format": "int32",
                    "type": "integer"
                },
                "previousCursor": {
                    "type": "string"
                },
                "searchString": {
                    "type": "string"
                },
                "sortCriteria": {
                    "type": "string"
                },
                "startIndex": {
                    "format": "int32",
                    "type": "integer"
                },
                "totalEntities": {
                    "format": "int32",
                    "type": "integer"
                }
            }
        },
        "get.base.StatsResponse": {
            "id": "get.base.StatsResponse",
            "required": [],
            "properties": {
                "statsSpecificResponses": {
                    "items": {
                        "$ref": "get.base.StatsResponse$StatsSpecificResponse"
                    },
                    "type": "array"
                }
            }
        },
        "get.base.StatsResponse$StatsSpecificResponse": {
            "id": "get.base.StatsResponse$StatsSpecificResponse",
            "required": [],
            "properties": {
                "intervalInSecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metric": {
                    "type": "string"
                },
                "startTimeInUsecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "successful": {
                    "type": "boolean"
                },
                "values": {
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.EntityMetadata": {
            "id": "get.dto.EntityMetadata",
            "required": [],
            "properties": {
                "additionalFields": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "contextHintField": {
                    "type": "string"
                },
                "contextHintValue": {
                    "type": "string"
                },
                "entityId": {
                    "type": "string"
                },
                "entityName": {
                    "type": "string"
                },
                "entityType": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ResultContentDescriptor": {
            "id": "get.dto.ResultContentDescriptor",
            "required": [],
            "properties": {
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "perspectives": {
                    "items": {
                        "$ref": "get.dto.ResultContentDescriptor$Perspective"
                    },
                    "type": "array"
                }
            }
        },
        "get.dto.ResultContentDescriptor$Perspective": {
            "id": "get.dto.ResultContentDescriptor$Perspective",
            "required": [],
            "properties": {
                "format": {
                    "enum": [
                        "TABLE",
                        "BAR_CHART",
                        "PIE_CHART",
                        "TIME_SERIES",
                        "KEY_VALUE",
                        "COUNT",
                        "HEALTH_SUMMARY",
                        "ALERT_INFO",
                        "CAPACITY",
                        "OTHER"
                    ],
                    "type": "string"
                },
                "metadata": {
                    "$ref": "get.dto.ResultMetadata"
                },
                "query": {},
                "result": {},
                "type": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata": {
            "id": "get.dto.ResultMetadata",
            "required": [],
            "properties": {
                "entityType": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filters": {
                    "items": {
                        "$ref": "get.dto.ResultMetadata$Filter"
                    },
                    "type": "array"
                },
                "instances": {
                    "items": {
                        "$ref": "get.dto.EntityMetadata"
                    },
                    "type": "array"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "get.dto.ResultMetadata$Filter": {
            "id": "get.dto.ResultMetadata$Filter",
            "required": [],
            "properties": {
                "displayForRhs": {
                    "type": "string"
                },
                "lhs": {
                    "type": "string"
                },
                "operator": {
                    "description": "Operator for the filter.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "rhs": {
                    "type": "string"
                }
            }
        },
        "get.dto.alerts.AlertCauseDTO": {
            "id": "get.dto.alerts.AlertCauseDTO",
            "required": [],
            "properties": {
                "actions": {
                    "description": "Possible actions to resolve this alert",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "additionalLinks": {
                    "description": "Additional links",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "alertNamespace": {
                    "description": "Namespace this alert belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "cause": {
                    "description": "Detailed description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "chartQueries": {
                    "$ref": "get.base.EntityCollection&lt;get.dto.ResultContentDescriptor&gt;",
                    "description": "Charts that are relevant to this cause",
                    "typeName": "DEFAULT"
                },
                "details": {
                    "description": "Symptoms for this cause",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "hasGlobalDetails": {
                    "description": "Whether the alert has global details or not",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "id": {
                    "description": "Cause Id",
                    "type": "string",
                    "typeName": "UUID_TYPE"
                },
                "numResolvedCount": {
                    "description": "Number of times this cause has resolved the alert",
                    "format": "int64",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "parentCauseId": {
                    "description": "Id of the alert/cause this is a possible cause for",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "title": {
                    "description": "Short description",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "troubleshootingSteps": {
                    "description": "Steps to determine whether this is the cause.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO": {
            "id": "get.dto.alerts.AlertDTO",
            "required": [],
            "properties": {
                "acknowledged": {
                    "type": "boolean"
                },
                "acknowledgedByUsername": {
                    "type": "string"
                },
                "acknowledgedTimeStampInUsecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "alertDetails": {
                    "$ref": "get.dto.alerts.AlertDTO$AlertDetailsDTO"
                },
                "alertTitle": {
                    "type": "string"
                },
                "alertTypeUuid": {
                    "type": "string"
                },
                "autoResolved": {
                    "type": "boolean"
                },
                "categories": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "checkId": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "contextTypes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "contextValues": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "createdTimeStampInUsecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "detailedMessage": {
                    "type": "string"
                },
                "entityIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "entityTypes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "entityUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "id": {
                    "type": "string"
                },
                "impact": {
                    "type": "string"
                },
                "lastOccurrenceTimeStampInUsecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "nodeUuid": {
                    "type": "string"
                },
                "originatingClusterUuid": {
                    "type": "string"
                },
                "possibleCauses": {
                    "items": {
                        "$ref": "get.dto.alerts.AlertCauseDTO"
                    },
                    "type": "array"
                },
                "resolved": {
                    "type": "boolean"
                },
                "resolvedByUsername": {
                    "type": "string"
                },
                "resolvedTimeStampInUsecs": {
                    "format": "int64",
                    "type": "integer"
                },
                "serviceVMId": {
                    "type": "string"
                },
                "severity": {
                    "description": "This field describes the severity of the alert.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$AlertDetailsDTO": {
            "id": "get.dto.alerts.AlertDTO$AlertDetailsDTO",
            "required": [],
            "properties": {
                "metricDetails": {
                    "description": "List of metric details associated with the alert",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricDetails"
                    },
                    "notes": "List of metric details associated with the alert",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "severityTrails": {
                    "description": "List that contains severity level change details",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$SeverityTrail"
                    },
                    "notes": "List that contains severity level change details",
                    "type": "array",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricDetails",
            "required": [],
            "properties": {
                "comparisonOperator": {
                    "description": "Comparison Operator to be applied for teh values.",
                    "notes": "Comparison Operator",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "conditionType": {
                    "description": "Condition Type that the current metric is associated with.",
                    "enum": [
                        "STATIC_THRESHOLD",
                        "ANOMALY",
                        "SAFETY_ZONE"
                    ],
                    "notes": "Condition Type that the current metric is associated with.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "dataType": {
                    "description": "Data Type of the value.",
                    "enum": [
                        "LONG",
                        "DOUBLE",
                        "BOOLEAN",
                        "STRING"
                    ],
                    "notes": "Data Type of the value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entityId": {
                    "description": "UUID of the entity",
                    "notes": "UUID of the entity",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "entityType": {
                    "description": "Entity Type",
                    "notes": "Entity Type",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metricDisplayName": {
                    "description": "Display name of the metric",
                    "notes": "Display name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metricName": {
                    "description": "Name of the metric",
                    "notes": "Name of the metric",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metricValueDetails": {
                    "description": "List of metric values at different instances of time in the alert lifecycle",
                    "items": {
                        "$ref": "get.dto.alerts.AlertDTO$MetricValueDetails"
                    },
                    "notes": "List of metric values at different instances of time in the alert lifecycle",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "unit": {
                    "description": "Unit of the metric value.",
                    "notes": "Unit of the metric value.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$MetricValueDetails": {
            "id": "get.dto.alerts.AlertDTO$MetricValueDetails",
            "required": [],
            "properties": {
                "metricThresholdValue": {
                    "description": "Threshold value of the metric that was specified in the policy at that given time.",
                    "notes": "Threshold value of the metric that was specified in the policy at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "metricValue": {
                    "description": "Actual value of the metric at that given time.",
                    "notes": "Actual value of the metric at that given time.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "stateChangeTimeStampInUsecs": {
                    "description": "Time at which the alert's state change occurred.",
                    "format": "int64",
                    "notes": "Time at which the alert's state change occurred.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertDTO$SeverityTrail": {
            "id": "get.dto.alerts.AlertDTO$SeverityTrail",
            "required": [],
            "properties": {
                "severity": {
                    "description": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "notes": "Severity level of the alert. Can be INFO, WARNING or CRITICAL",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "severityChangeTimestampInUsecs": {
                    "description": "Time at which the severity level change occurred",
                    "format": "int64",
                    "notes": "Time at which the severity level change occurred",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.alerts.AlertSummaryDTO": {
            "id": "get.dto.alerts.AlertSummaryDTO",
            "required": [],
            "properties": {
                "alertSummaries": {
                    "$ref": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;"
                },
                "count": {
                    "format": "int64",
                    "type": "integer"
                }
            }
        },
        "get.dto.appliance.configuration.VDiskDTO": {
            "id": "get.dto.appliance.configuration.VDiskDTO",
            "required": [],
            "properties": {
                "alertSummary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "clusterUuid": {
                    "description": " Uuid of the cluster this entity belongs to",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "containerId": {
                    "type": "string"
                },
                "containerName": {
                    "type": "string"
                },
                "containerUuid": {
                    "type": "string"
                },
                "creationTimeInMicrosSinceEpoch": {
                    "format": "int64",
                    "type": "integer"
                },
                "disabled": {
                    "type": "boolean"
                },
                "erasureCode": {
                    "type": "string"
                },
                "erasureCodeDelaySecs": {
                    "format": "int32",
                    "type": "integer"
                },
                "fingerPrintOnWrite": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "healthSummary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "immutable": {
                    "type": "boolean"
                },
                "iscsiLun": {
                    "format": "int32",
                    "type": "integer"
                },
                "iscsiTargetName": {
                    "type": "string"
                },
                "markedForRemoval": {
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "maxCapacityBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nfsFile": {
                    "type": "boolean"
                },
                "nfsFileName": {
                    "type": "string"
                },
                "onDiskDedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "parentNfsFileName": {
                    "type": "string"
                },
                "qosFairshare": {
                    "type": "string"
                },
                "qosPriority": {
                    "type": "string"
                },
                "shared": {
                    "type": "boolean"
                },
                "snapshot": {
                    "type": "boolean"
                },
                "snapshots": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "storagePoolId": {
                    "type": "string"
                },
                "storagePoolName": {
                    "type": "string"
                },
                "storagePoolUuid": {
                    "type": "string"
                },
                "totalReservedCapacityBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "usageStats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "vdiskUuid": {
                    "type": "string"
                }
            }
        },
        "get.dto.appliance.configuration.VirtualDiskDTO": {
            "id": "get.dto.appliance.configuration.VirtualDiskDTO",
            "required": [],
            "properties": {
                "alertSummary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "attachedVMName": {
                    "type": "string"
                },
                "attachedVmId": {
                    "type": "string"
                },
                "attachedVmUuid": {
                    "type": "string"
                },
                "attachedVolumeGroupId": {
                    "type": "string"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "containerId": {
                    "description": "Virtual disk's owning container Id.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "containerUuid": {
                    "description": "Virtual disk's owning container UUID.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "diskAddress": {
                    "type": "string"
                },
                "diskCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "healthSummary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "nutanixNFSFilePath": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usageStats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "virtualDiskId": {
                    "type": "string"
                }
            }
        },
        "get.dto.dr.QueryVMSnapshotInfoDTO": {
            "id": "get.dto.dr.QueryVMSnapshotInfoDTO",
            "required": [],
            "properties": {
                "diskLabels": {
                    "description": "List of disk labels in snapshot.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of disk labels in snapshot.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "diskUuids": {
                    "description": "List of uuids of disk labels.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "List of uuids of disk labels.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "flrCapabale": {
                    "description": "Is snapshot File Level Restore Capable or not.",
                    "notes": "Is snapshot File Level Restore Capable or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "locallyAvaiable": {
                    "description": "Is snapshot Locally available.",
                    "notes": "Is snapshot Locally available.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "remoteSites": {
                    "description": "Names of remote sites where this snapshot is present.",
                    "items": {
                        "type": "string"
                    },
                    "notes": "Names of remote sites where this snapshot is present.",
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "snapshotCreateTime": {
                    "description": "Time at which snapshot is created.",
                    "format": "int64",
                    "notes": "Time at which snapshot is created.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshotExpiryTime": {
                    "description": "Time at which snapshot expires.",
                    "format": "int64",
                    "notes": "Time at which snapshot expires.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                },
                "snapshotId": {
                    "description": "Unique Identifier of snapshot.",
                    "format": "int64",
                    "notes": "Unique Identifier of snapshot.",
                    "type": "integer",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.health.check.EntityTypeHealthCheckSummaryDTO": {
            "id": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO",
            "required": [],
            "properties": {
                "checksInError": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;"
                },
                "detailedCheckSummary": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;"
                },
                "entityType": {
                    "enum": [
                        "CLUSTER",
                        "HARDWARE",
                        "STORAGE",
                        "BACKUP",
                        "DR",
                        "LICENSE",
                        "DISK",
                        "STORAGE_TIER",
                        "HOST",
                        "NODE",
                        "MANAGEMENT_SERVER",
                        "MANAGEMENT_SERVER_INFO",
                        "VM",
                        "SERVICE_VM",
                        "VDISK",
                        "VIRTUAL_DISK",
                        "STORAGE_POOL",
                        "CONTAINER",
                        "STORAGE_CONTAINER",
                        "VZONE",
                        "SNAPSHOT",
                        "FAST_CLONE",
                        "RSYSLOG_SERVER",
                        "KEY_MANAGEMENT_SERVER",
                        "CERTIFICATE",
                        "HTTP_PROXY",
                        "SNMP_TRAP",
                        "SNMP_USER",
                        "REMOTE_SITE",
                        "CLOUD_CREDENTIALS",
                        "PROTECTION_DOMAIN",
                        "CONSISTENCY_GROUP",
                        "REPLICATION",
                        "REPLICATION_LINK",
                        "SYNC_REPLICATION",
                        "VSTORE",
                        "NETWORK_SWITCH_INTERFACE",
                        "NETWORK_SWITCH",
                        "VIRTUAL_NIC",
                        "VMKERNEL_NIC",
                        "HOST_NIC",
                        "NIC_TEAM",
                        "VIRTUAL_NETWORK",
                        "VIRTUAL_SWITCH",
                        "HOST_GPU",
                        "VIRTUAL_GPU",
                        "TAG",
                        "COMMENT",
                        "TASK",
                        "IMAGE",
                        "IMAGE_INFO",
                        "ISCSI_CLIENT",
                        "VOLUME_GROUP",
                        "VOLUME_DISK",
                        "VM_DISK",
                        "FILE_SERVER",
                        "FS_PARTNER_SERVER",
                        "CVM",
                        "NVM",
                        "FILE_SERVER_SHARE",
                        "ALERT_CAUSE",
                        "ALERT_CHECK_SCHEMA",
                        "ALERT_CHECK_SCHEMA_OVERRIDE",
                        "INTER_CLUSTER_DATA_TRANSFER_INDICATOR",
                        "RACKABLE_UNIT",
                        "DIRECTORY_CONFIG",
                        "HEALTH_CHECK",
                        "NETWORK_SNMP_PROFILE",
                        "ALERT",
                        "SCHEDULE",
                        "BANDWIDTH_POLICY",
                        "FILE_GROUP",
                        "NETWORK_MAPPING",
                        "PROGRESS_MONITOR",
                        "LCM_ENTITY",
                        "LCM_AVAILABLE_VERSION",
                        "CAPACITY_SCENARIO",
                        "NCC_ERROR_CODES",
                        "RESOURCE_CONSUMPTION",
                        "REPORT_CONFIG",
                        "REPORT_INSTANCE",
                        "COMMON_REPORT_CONFIG",
                        "REMOTE_CONNECTION"
                    ],
                    "type": "string"
                },
                "filterCriteria": {
                    "type": "string"
                },
                "healthSummary": {
                    "$ref": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;"
                }
            }
        },
        "get.dto.health.check.HealthSummaryDTO": {
            "id": "get.dto.health.check.HealthSummaryDTO",
            "required": [],
            "properties": {
                "entityTypeSummaries": {
                    "items": {
                        "$ref": "get.dto.health.check.EntityTypeHealthCheckSummaryDTO"
                    },
                    "type": "array"
                },
                "healthCheckSummaries": {
                    "$ref": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;"
                },
                "healthStatus": {
                    "enum": [
                        "Critical",
                        "Warning",
                        "Good",
                        "Unknown",
                        "Error"
                    ],
                    "type": "string"
                }
            }
        },
        "get.dto.ngt.NutanixGuestToolsDTO": {
            "id": "get.dto.ngt.NutanixGuestToolsDTO",
            "required": [],
            "properties": {
                "applications": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "Map of application names and is it enabled.",
                    "notes": "Map of application names and is it enabled.",
                    "typeName": "DEFAULT"
                },
                "clusterVersion": {
                    "description": "Version of NGT available on the cluster.",
                    "notes": "Version of NGT on the cluster.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "communicationLinkActive": {
                    "description": "Communication from vm to cvm is active or not.",
                    "notes": "Communication from vm to cvm is active or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Nutanix Guest Tools are enabled or not.",
                    "notes": "Nutanix Guest Tools are enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "installedVersion": {
                    "description": "Version of NGT installed on the VM.",
                    "notes": "Version of NGT installed.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "toRemove": {
                    "description": "Whether Nutanix Guest Tools is removed or not.",
                    "notes": "Whether Nutanix Guest Tools is removed or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "toolsMounted": {
                    "description": "Nutanix Guest Tools ISO is mounted or not.",
                    "notes": "Nutanix Guest Tools ISO is mounted or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vmId": {
                    "description": "Unique identifier of VM.",
                    "notes": "Unique identifier of VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmName": {
                    "description": "Name of VM.",
                    "notes": "Name of VM.",
                    "type": "string",
                    "typeName": "DEFAULT"
                },
                "vmUuid": {
                    "description": "UUID of the Virtual Machine.",
                    "notes": "UUID of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "get.dto.stats.VMDTO": {
            "id": "get.dto.stats.VMDTO",
            "required": [],
            "properties": {
                "acropolisVm": {
                    "type": "boolean"
                },
                "alertSummary": {
                    "$ref": "get.dto.alerts.AlertSummaryDTO"
                },
                "clusterUuid": {
                    "type": "string"
                },
                "consistencyGroupName": {
                    "type": "string"
                },
                "containerIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "containerUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "controlDomain": {
                    "description": "Whether the VM is a control domain. Applicable only for XenServer.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "controllerVm": {
                    "type": "boolean"
                },
                "cpuReservedInHz": {
                    "format": "int64",
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "diskCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "displayable": {
                    "type": "boolean"
                },
                "fingerPrintOnWrite": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "ON"
                    ],
                    "type": "string"
                },
                "gpusInUse": {
                    "type": "boolean"
                },
                "guestOperatingSystem": {
                    "type": "string"
                },
                "healthSummary": {
                    "$ref": "get.dto.health.check.HealthSummaryDTO"
                },
                "hostId": {
                    "type": "string"
                },
                "hostName": {
                    "type": "string"
                },
                "hostUuid": {
                    "type": "string"
                },
                "hypervisorType": {
                    "type": "string"
                },
                "ipAddresses": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "memoryCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "memoryReservedCapacityInBytes": {
                    "format": "int64",
                    "type": "integer"
                },
                "nonNdfsDetails": {
                    "type": "string"
                },
                "numNetworkAdapters": {
                    "format": "int64",
                    "type": "integer"
                },
                "numVCpus": {
                    "format": "int32",
                    "type": "integer"
                },
                "nutanixGuestTools": {
                    "$ref": "get.dto.ngt.NutanixGuestToolsDTO"
                },
                "nutanixVirtualDiskIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nutanixVirtualDiskUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "nutanixVirtualDisks": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "onDiskDedup": {
                    "enum": [
                        "NONE",
                        "OFF",
                        "POST_PROCESS"
                    ],
                    "type": "string"
                },
                "powerState": {
                    "type": "string"
                },
                "protectionDomainName": {
                    "type": "string"
                },
                "protectionType": {
                    "type": "string"
                },
                "runningOnNdfs": {
                    "type": "boolean"
                },
                "stats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "usageStats": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.String&gt;"
                },
                "uuid": {
                    "type": "string"
                },
                "vdiskFilePaths": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "vdiskNames": {
                    "description": "Names of vdisks associated with this VM",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "typeName": "DEFAULT"
                },
                "virtualNicIds": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "virtualNicUuids": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "vmFeatures": {
                    "$ref": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
                    "description": "List of features to be enabled for the Virtual Machine.",
                    "notes": "List of features to be enabled for the Virtual Machine.",
                    "typeName": "DEFAULT"
                },
                "vmId": {
                    "type": "string"
                },
                "vmName": {
                    "type": "string"
                }
            }
        },
        "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;create.dto.alerts.AlertDTO$AlertSeverity, create.base.EntityCollection&lt;create.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;create.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;": {
            "id": "java.util.Map&lt;get.dto.alerts.AlertDTO$AlertSeverity, get.base.EntityCollection&lt;get.dto.alerts.AlertDTO&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;": {
            "id": "java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;get.dto.uhura.VmConfigDTO$VmFeature, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, create.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckErrorsDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;": {
            "id": "java.util.Map&lt;java.lang.String, get.dto.health.check.HealthCheckSummaryDTO&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.lang.String&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.lang.String&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;create.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;": {
            "id": "java.util.Map&lt;java.lang.String, java.util.Map&lt;get.dto.health.check.HealthStatus, java.lang.Integer&gt;&gt;",
            "required": [],
            "properties": {}
        },
        "patch.dto.RequestDTO&lt;patch.dto.ngt.NutanixGuestToolsDTO&gt;": {
            "id": "patch.dto.RequestDTO&lt;patch.dto.ngt.NutanixGuestToolsDTO&gt;",
            "required": [],
            "properties": {
                "clusterUuid": {
                    "type": "string"
                },
                "genericDTO": {
                    "$ref": "patch.dto.ngt.NutanixGuestToolsDTO"
                },
                "operation": {
                    "type": "string"
                }
            }
        },
        "patch.dto.ngt.NutanixGuestToolsDTO": {
            "id": "patch.dto.ngt.NutanixGuestToolsDTO",
            "required": [],
            "properties": {
                "applications": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "Map of application names and is it enabled.",
                    "notes": "Map of application names and is it enabled.",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Nutanix Guest Tools are enabled or not.",
                    "notes": "Nutanix Guest Tools are enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vmUuid": {
                    "description": "UUID of the Virtual Machine.",
                    "notes": "UUID of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        },
        "update.dto.ngt.NutanixGuestToolsDTO": {
            "id": "update.dto.ngt.NutanixGuestToolsDTO",
            "required": [],
            "properties": {
                "applications": {
                    "$ref": "java.util.Map&lt;java.lang.String, java.lang.Boolean&gt;",
                    "description": "Map of application names and is it enabled.",
                    "notes": "Map of application names and is it enabled.",
                    "typeName": "DEFAULT"
                },
                "enabled": {
                    "description": "Nutanix Guest Tools are enabled or not.",
                    "notes": "Nutanix Guest Tools are enabled or not.",
                    "type": "boolean",
                    "typeName": "DEFAULT"
                },
                "vmUuid": {
                    "description": "UUID of the Virtual Machine.",
                    "notes": "UUID of the Virtual Machine.",
                    "type": "string",
                    "typeName": "DEFAULT"
                }
            }
        }
    }
}